<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on Lamin Sanneh</title><link>http://laminsanneh.com/categories/testing/</link><description>Recent content in Testing on Lamin Sanneh</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 09 Jul 2024 20:22:16 +0000</lastBuildDate><atom:link href="http://laminsanneh.com/categories/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Playwright and React.js Typescript Todo App Automated End to End Testing with Vite</title><link>http://laminsanneh.com/posts/playwright-react-js-typescript-todo-app-automated-testing-vite/</link><pubDate>Tue, 09 Jul 2024 20:22:16 +0000</pubDate><guid>http://laminsanneh.com/posts/playwright-react-js-typescript-todo-app-automated-testing-vite/</guid><description>Introduction In this tutorial, we&amp;rsquo;ll create a simple Todo app using React.js and TypeScript, initialized with Vite, and then we&amp;rsquo;ll write tests for it using Playwright. We will use playwright to do an end to end test which will simulate the user browser interaction with our todo app like adding new todos, deleting todos, upadtinhg todos e.t.c. By the end of this guide, you&amp;rsquo;ll have a solid understanding of how to use Playwright to test your React applications.</description></item><item><title>React.js Typescript Todo App Testing with Jest and React Testing Library and Vite</title><link>http://laminsanneh.com/posts/react-js-typescript-todo-app-testing-jest-react-testing-library-vite/</link><pubDate>Sun, 30 Jun 2024 14:24:14 +0000</pubDate><guid>http://laminsanneh.com/posts/react-js-typescript-todo-app-testing-jest-react-testing-library-vite/</guid><description>Introduction In this tutorial, we shall setup Jest and React Testing Library to perform integration test. We will be testing React.Js components, so this will not be an end to test, but we will be testing the individual coponents involved in the Todo App. At each stage, we will render the components invovled using the library functions provided by React Testing Library. We shall pass in properties to each component and test their behavious and visualisation by simulating clicks and text typing into textboxes using the appropriate functions.</description></item></channel></rss>