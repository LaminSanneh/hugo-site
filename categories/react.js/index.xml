<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React.js on Lamin Sanneh</title><link>http://laminsanneh.com/categories/react.js/</link><description>Recent content in React.js on Lamin Sanneh</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 22 Jul 2024 11:30:00 +0000</lastBuildDate><atom:link href="http://laminsanneh.com/categories/react.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting Up a React.js Webpack and Typescript App From Scratch using Todo App</title><link>http://laminsanneh.com/posts/2024-07-19-setting-up-a-react.js-webpack-and-typescript-app-from-scratch-using-todo-app/</link><pubDate>Mon, 22 Jul 2024 11:30:00 +0000</pubDate><guid>http://laminsanneh.com/posts/2024-07-19-setting-up-a-react.js-webpack-and-typescript-app-from-scratch-using-todo-app/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>In this tutorial, we&amp;rsquo;ll set up a React.js Todo application using TypeScript and Webpack from scratch. This will include configuring Webpack to handle TypeScript and React code, setting up a development server, and building our project for production.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;ul>
&lt;li>Node.js and npm installed on your machine.&lt;/li>
&lt;li>Basic understanding of React.js, TypeScript, and Webpack.&lt;/li>
&lt;/ul>
&lt;h3 id="project-setup">Project Setup&lt;/h3>
&lt;p>First, let&amp;rsquo;s create a new directory for our project and initialize a new Node.js project.&lt;/p></description></item><item><title>Playwright and React.js Typescript Todo App Automated End to End Testing with Vite</title><link>http://laminsanneh.com/posts/playwright-react-js-typescript-todo-app-automated-testing-vite/</link><pubDate>Tue, 09 Jul 2024 20:22:16 +0000</pubDate><guid>http://laminsanneh.com/posts/playwright-react-js-typescript-todo-app-automated-testing-vite/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>In this tutorial, we&amp;rsquo;ll create a simple Todo app using React.js and TypeScript, initialized with Vite, and then we&amp;rsquo;ll write tests for it using &lt;a href="https://playwright.dev/" target="_blank" rel="noopener">Playwright&lt;/a>. We will use playwright to do an end to end test which will simulate the user browser interaction with our todo app like adding new todos, deleting todos, upadtinhg todos e.t.c. By the end of this guide, you&amp;rsquo;ll have a solid understanding of how to use Playwright to test your React applications.&lt;/p></description></item><item><title>React.js Typescript Todo App Testing with Jest and React Testing Library and Vite</title><link>http://laminsanneh.com/posts/react-js-typescript-todo-app-testing-jest-react-testing-library-vite/</link><pubDate>Sun, 30 Jun 2024 14:24:14 +0000</pubDate><guid>http://laminsanneh.com/posts/react-js-typescript-todo-app-testing-jest-react-testing-library-vite/</guid><description>&lt;h4 id="introduction">Introduction&lt;/h4>
&lt;p>In this tutorial, we shall setup &lt;a href="https://jestjs.io/" target="_blank" rel="noopener">Jest&lt;/a> and &lt;a href="https://testing-library.com/docs/react-testing-library/intro/" target="_blank" rel="noopener">React Testing Library&lt;/a> to perform integration test. We will be testing React.Js components, so this will not be an end to test, but we will be testing the individual coponents involved in the Todo App. At each stage, we will render the components invovled using the library functions provided by React Testing Library. We shall pass in properties to each component and test their behavious and visualisation by simulating clicks and text typing into textboxes using the appropriate functions. Jest will be used as our test runner. These two libraries are independent but work very well together. So let&amp;rsquo;s get started.&lt;/p></description></item><item><title>How to Dockerize a Laravel 11 and React 18 Application for Development</title><link>http://laminsanneh.com/posts/dockerize-laravel-11-react-18-application-development/</link><pubDate>Tue, 25 Jun 2024 13:03:26 +0000</pubDate><guid>http://laminsanneh.com/posts/dockerize-laravel-11-react-18-application-development/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>Docker has become a popular choice for development environments due to its ability to containerize applications and simplify deployment across different systems. This guide will walk you through dockerizing a Laravel 11 backend and React 18 frontend application, using Docker Compose to orchestrate multiple services. We wil assume that your laravel and react apps live in seperate folders and will be served through different domain. Suffice to say that the react app will not be served from the laravel backend but will use the laravel backend only as an api service.&lt;/p></description></item><item><title>React.js How to use User Roles to Secure Frontend Menu Links and Routes Using a Wrapper Component for User Authentication and Backend Permission Control</title><link>http://laminsanneh.com/posts/react-js-user-roles-secure-frontend-menu-links-routes-wrapper-component-user-authentication-backend-permission-control/</link><pubDate>Sun, 23 Jun 2024 12:35:17 +0000</pubDate><guid>http://laminsanneh.com/posts/react-js-user-roles-secure-frontend-menu-links-routes-wrapper-component-user-authentication-backend-permission-control/</guid><description>&lt;p>In modern web applications, managing user authentication and permissions is crucial. One effective way to handle this in React.js is by using a wrapper component. This article will guide you through creating a wrapper component that controls access to routes and links based on user roles and permissions. We will leverage Redux Toolkit to manage user state and permissions.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>Before we start, make sure you have the following setup:&lt;/p></description></item><item><title>React Redux Toolkit with Typescript How to Set Up, Understand, and Use the library in Your React.js App</title><link>http://laminsanneh.com/posts/react-redux-toolkit-typescript-set-understand-library-react-js-app/</link><pubDate>Tue, 18 Jun 2024 11:09:36 +0000</pubDate><guid>http://laminsanneh.com/posts/react-redux-toolkit-typescript-set-understand-library-react-js-app/</guid><description>&lt;p>Using typescript and integrating React Redux toolkit into your React application can enhance your state management, making your app more robust and scalable. Redux Toolkit simplifies this process by providing a set of tools and best practices. This guide will walk you through setting up Redux Toolkit in a React application, understanding its key components, and effectively using it to manage your app&amp;rsquo;s state.&lt;/p>
&lt;h3 id="step-1-setting-up-redux-toolkit">Step 1: Setting Up Redux Toolkit&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install @reduxjs/toolkit react-redux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="configuring-the-store">Configuring the Store&lt;/h4>
&lt;p>In your project, create a file named store.ts for setting up the Redux store and reducers.&lt;/p></description></item><item><title>React.js useEffect How to prevent component weird bahaviour due to multiple out of order server fetches</title><link>http://laminsanneh.com/posts/react-js-useeffect-prevent-component-weird-bahaviour-due-multiple-order-server-fetches/</link><pubDate>Tue, 18 Jun 2024 10:02:40 +0000</pubDate><guid>http://laminsanneh.com/posts/react-js-useeffect-prevent-component-weird-bahaviour-due-multiple-order-server-fetches/</guid><description>&lt;p>To prevent out-of-sync React Redux toolkit dispatches or just plain react.js in general which could result in unexpected behaviors due to asynchronous server requests returning at different times, we need to ensure that we handle component unmounts or updates correctly. This ensures that when a component re-renders or unmounts, for several reasons like a user clicks on another link related to the same component, it does not attempt to set state based on outdated or irrelevant asynchronous responses.&lt;/p></description></item><item><title>Cypress and TypeScript React.js Todo App End-to-End Testing</title><link>http://laminsanneh.com/posts/cypress-typescript-react-js-todo-app-testing/</link><pubDate>Thu, 06 Jun 2024 09:42:58 +0000</pubDate><guid>http://laminsanneh.com/posts/cypress-typescript-react-js-todo-app-testing/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>In this tutorial, we will build a React.js Todo app using TypeScript, initialize the project using Vite, and set up Cypress for end-to-end (E2E) testing. We will cover all the steps, including project setup, writing the Todo app, and creating Cypress tests.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>Before we start, ensure you have the following installed on your machine:&lt;/p>
&lt;ul>
&lt;li>Node.js and npm (or yarn)&lt;/li>
&lt;li>A code editor (VS Code is recommended)&lt;/li>
&lt;/ul>
&lt;h3 id="initialize-the-project-with-vite">Initialize the Project with Vite&lt;/h3>
&lt;p>Let&amp;rsquo;s create a new React project using Vite.&lt;/p></description></item><item><title>Laravel 11 and React 18 Login and Registration tutorial with React Redux Toolkit</title><link>http://laminsanneh.com/posts/laravel-11-react-18-login-registration-tutorial-react-redux-toolkit/</link><pubDate>Tue, 28 May 2024 09:17:32 +0000</pubDate><guid>http://laminsanneh.com/posts/laravel-11-react-18-login-registration-tutorial-react-redux-toolkit/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this tutorial, we will be setting up an indepth tutorial guide of react.js and laravel 11 system for user authentication and registration. We will be using typescript on the react.js frontned, along with react redux toolkit, but do not worry as youc an follow along even if you only know javascript. React redux toolkit helps with state management. It might be overkill for a simple login registration app like this, but makes life very easy once the app codebase grows. Users will be able to register using an email as their username and password. After successful registration, they shall be able to login. We wil demonstrate the login mechanism by having a userpforile area/route in the frontend of the application which will be locked and only accessible to logged in. The frontend and backend will be on different domains, so the after logging in, we will provide the user with a token, which will be stored in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noopener">localstorage&lt;/a> of the browser. This will be send along in the header each request which requires authentication to get data back from the server. We will also need to setup &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">cors&lt;/a> so that our frontend domain can send requests to the backend domanin app.&lt;/p></description></item></channel></rss>