<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React.js on Lamin Sanneh</title><link>http://laminsanneh.com/categories/react.js/</link><description>Recent content in React.js on Lamin Sanneh</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 25 Jun 2024 13:03:26 +0000</lastBuildDate><atom:link href="http://laminsanneh.com/categories/react.js/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Dockerize a Laravel 11 and React 18 Application for Development</title><link>http://laminsanneh.com/posts/dockerize-laravel-11-react-18-application-development/</link><pubDate>Tue, 25 Jun 2024 13:03:26 +0000</pubDate><guid>http://laminsanneh.com/posts/dockerize-laravel-11-react-18-application-development/</guid><description>Introduction Docker has become a popular choice for development environments due to its ability to containerize applications and simplify deployment across different systems. This guide will walk you through dockerizing a Laravel 11 backend and React 18 frontend application, using Docker Compose to orchestrate multiple services. We wil assume that your laravel and react apps live in seperate folders and will be served through different domain. Suffice to say that the react app will not be served from the laravel backend but will use the laravel backend only as an api service.</description></item><item><title>React.js How to use User Roles to Secure Frontend Menu Links and Routes Using a Wrapper Component for User Authentication and Backend Permission Control</title><link>http://laminsanneh.com/posts/react-js-user-roles-secure-frontend-menu-links-routes-wrapper-component-user-authentication-backend-permission-control/</link><pubDate>Sun, 23 Jun 2024 12:35:17 +0000</pubDate><guid>http://laminsanneh.com/posts/react-js-user-roles-secure-frontend-menu-links-routes-wrapper-component-user-authentication-backend-permission-control/</guid><description>In modern web applications, managing user authentication and permissions is crucial. One effective way to handle this in React.js is by using a wrapper component. This article will guide you through creating a wrapper component that controls access to routes and links based on user roles and permissions. We will leverage Redux Toolkit to manage user state and permissions.
Prerequisites Before we start, make sure you have the following setup:</description></item><item><title>React Redux Toolkit with Typescript How to Set Up, Understand, and Use the library in Your React.js App</title><link>http://laminsanneh.com/posts/react-redux-toolkit-typescript-set-understand-library-react-js-app/</link><pubDate>Tue, 18 Jun 2024 11:09:36 +0000</pubDate><guid>http://laminsanneh.com/posts/react-redux-toolkit-typescript-set-understand-library-react-js-app/</guid><description>Using typescript and integrating React Redux toolkit into your React application can enhance your state management, making your app more robust and scalable. Redux Toolkit simplifies this process by providing a set of tools and best practices. This guide will walk you through setting up Redux Toolkit in a React application, understanding its key components, and effectively using it to manage your app&amp;rsquo;s state.
Step 1: Setting Up Redux Toolkit npm install @reduxjs/toolkit react-redux Configuring the Store In your project, create a file named store.</description></item><item><title>React.js useEffect How to prevent component weird bahaviour due to multiple out of order server fetches</title><link>http://laminsanneh.com/posts/react-js-useeffect-prevent-component-weird-bahaviour-due-multiple-order-server-fetches/</link><pubDate>Tue, 18 Jun 2024 10:02:40 +0000</pubDate><guid>http://laminsanneh.com/posts/react-js-useeffect-prevent-component-weird-bahaviour-due-multiple-order-server-fetches/</guid><description>To prevent out-of-sync React Redux toolkit dispatches or just plain react.js in general which could result in unexpected behaviors due to asynchronous server requests returning at different times, we need to ensure that we handle component unmounts or updates correctly. This ensures that when a component re-renders or unmounts, for several reasons like a user clicks on another link related to the same component, it does not attempt to set state based on outdated or irrelevant asynchronous responses.</description></item><item><title>Cypress and TypeScript React.js Todo App End-to-End Testing</title><link>http://laminsanneh.com/posts/cypress-typescript-react-js-todo-app-testing/</link><pubDate>Thu, 06 Jun 2024 09:42:58 +0000</pubDate><guid>http://laminsanneh.com/posts/cypress-typescript-react-js-todo-app-testing/</guid><description>Introduction In this tutorial, we will build a React.js Todo app using TypeScript, initialize the project using Vite, and set up Cypress for end-to-end (E2E) testing. We will cover all the steps, including project setup, writing the Todo app, and creating Cypress tests.
Prerequisites Before we start, ensure you have the following installed on your machine:
Node.js and npm (or yarn) A code editor (VS Code is recommended) Initialize the Project with Vite Let&amp;rsquo;s create a new React project using Vite.</description></item><item><title>Laravel 11 and React 18 Login and Registration tutorial with React Redux Toolkit</title><link>http://laminsanneh.com/posts/laravel-11-react-18-login-registration-tutorial-react-redux-toolkit/</link><pubDate>Tue, 28 May 2024 09:17:32 +0000</pubDate><guid>http://laminsanneh.com/posts/laravel-11-react-18-login-registration-tutorial-react-redux-toolkit/</guid><description>Introduction In this tutorial, we will be setting up an indepth tutorial guide of react.js and laravel 11 system for user authentication and registration. We will be using typescript on the react.js frontned, along with react redux toolkit, but do not worry as youc an follow along even if you only know javascript. React redux toolkit helps with state management. It might be overkill for a simple login registration app like this, but makes life very easy once the app codebase grows.</description></item></channel></rss>