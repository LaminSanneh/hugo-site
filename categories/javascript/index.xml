<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Lamin Sanneh</title><link>http://laminsanneh.com/categories/javascript/</link><description>Recent content in Javascript on Lamin Sanneh</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 16 Jun 2013 09:23:11 +0000</lastBuildDate><atom:link href="http://laminsanneh.com/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>How to set up live reload in 5 easy steps</title><link>http://laminsanneh.com/posts/set-live-reload-5-easy-steps/</link><pubDate>Sun, 16 Jun 2013 09:23:11 +0000</pubDate><guid>http://laminsanneh.com/posts/set-live-reload-5-easy-steps/</guid><description>Manual all the way! When you start out web developing, the appeal to do a lot of stuff manually might be appealing. However, once you step into intermediate to advanced level you will probably be constantly searching for tools to help automate your workflow. One such tool for me is Live Reload.
If you are wondering what this tool does. It enables you to see html changes instantly in your browser as you type.</description></item><item><title>Underscore js, the missing Linq for c-sharp developers</title><link>http://laminsanneh.com/posts/2013-05-22-underscore-js-the-missing-linq-for-c-sharp-developers/</link><pubDate>Wed, 22 May 2013 12:50:17 +0000</pubDate><guid>http://laminsanneh.com/posts/2013-05-22-underscore-js-the-missing-linq-for-c-sharp-developers/</guid><description>Introduction We all have our favourite languages that we feel most comfortable with for various reasons. One such language for me is the c-sharp language. One of the primary reasons why I love the language is a really cool feature called Linq.
I simply cannot emphasize the amount of time this feature has saved me while doing work. It integrates seamlessly into my workflow and find myself almost subconsciously using it.</description></item><item><title>Html5 localStorage, dead simple</title><link>http://laminsanneh.com/posts/html5-localstorage-dead-simple/</link><pubDate>Sat, 20 Apr 2013 09:16:52 +0000</pubDate><guid>http://laminsanneh.com/posts/html5-localstorage-dead-simple/</guid><description>Introduction Lets get something straight, this stuff (Html5 localStorage) should be simple, dead simple, so here we go.
Storing Simple Data (e.g. numbers and strings) localStorage.setItem(keyName, myString);
Notice the capital letter “S“ in localStorage , its necessary.
Don’t worry localStorage is a global variable in your browser, so use it freely from anywhere.
Retrieving Simple Data localStorage.getItem(keyName);
Storing Object localStorage.setItem(keyName, JSON.stringify(yourObject));
When storing objects, you would want to serialize your object into a string using “JSON.</description></item><item><title>What is Cross Origin Resource Sharing and when to use it?</title><link>http://laminsanneh.com/posts/cross-origin-resource-sharing/</link><pubDate>Mon, 08 Apr 2013 09:32:53 +0000</pubDate><guid>http://laminsanneh.com/posts/cross-origin-resource-sharing/</guid><description>The Problem When developing highly ajax enabled applications using javascript, you may not always be fortunate to have both the client and server side of the application be hosted on the same domain. You might be asking, what does this mean? Good question.
I am confident that you know what a domain is. If not, then have a quick look here at the wikipedia article. Ok, so lets say you have a domain named http://www.</description></item></channel></rss>