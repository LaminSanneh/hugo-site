[{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Introduction"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"Basic Types"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":["Laravel","React.js","Devops"],"contents":"Introduction Docker has become a popular choice for development environments due to its ability to containerize applications and simplify deployment across different systems. This guide will walk you through dockerizing a Laravel 11 backend and React 18 frontend application, using Docker Compose to orchestrate multiple services. We wil assume that your laravel and react apps live in seperate folders and will be served through different domain. Suffice to say that the react app will not be served from the laravel backend but will use the laravel backend only as an api service.\nDocker Compose Configuration First, create a docker-compose.yml file in your project\u0026rsquo;s root directory:\nversion: \u0026#39;3\u0026#39; services: app: build: context: ./laravel-11-backend dockerfile: Dockerfile ports: - \u0026#34;8000:9000\u0026#34; volumes: - ./laravel-11-backend:/var/www/html - ./laravel-11-backend/storage:/var/www/html/storage - ./laravel-11-backend/bootstrap/cache:/var/www/html/bootstrap/cache networks: - laravel-network depends_on: - mysql environment: - DB_HOST=mysql mysql: image: mysql:8.0 restart: unless-stopped environment: MYSQL_DATABASE: laravel_react_blog_user_permission MYSQL_USER: app MYSQL_PASSWORD: password MYSQL_ROOT_PASSWORD: vicecity ports: - \u0026#34;3306:3306\u0026#34; volumes: - mysql_data:/var/lib/mysql networks: - laravel-network nginx: build: context: ./nginx ports: - \u0026#34;80:80\u0026#34; volumes: - ./laravel-11-backend:/var/www/html networks: - laravel-network depends_on: - app frontend: build: context: ./react-18-frontend dockerfile: Dockerfile ports: - \u0026#34;5173:5173\u0026#34; volumes: - ./react-18-frontend:/usr/src/app - /usr/src/app/node_modules networks: - laravel-network depends_on: - app networks: laravel-network: driver: bridge volumes: mysql_data: Then in the root folder where the docker-compose.yml file is, create three folders if they dont exist already.laravel-11-backend for your laravel folder. react-18-frontend for the react app and nginx for the nginx files.\nBreakdown of docker-compose.yml:\napp Service (Laravel Backend):\nBuilds from ./laravel-11-backend using Dockerfile. Exposes port 9000 internally, mapped to 8000 externally on the local machine. Mounts Laravel directories for code and storage. Depends on mysql service and connects to by setting DB_HOST environment variable.\nmysql Service:\nUses MySQL 8.0 image with predefined environment variables for database setup. Exposes port 3306 for database connections. Persists MySQL data to mysql_data volume.\nnginx Service:\nBuilds from ./nginx folder using its Dockerfile. Forwards port 80 to serve Laravel\u0026rsquo;s public directory. Mounts Laravel directory to serve PHP files through PHP-FPM.\nfrontend Service (React Frontend):\nBuilds from ./react-18-frontend using Dockerfile. Exposes port 5173 for React development server. Mounts React source code and node_modules for live updates.\nNetworks and Volumes:\nDefines a laravel-network for communication between services. Creates mysql_data volume for MySQL data persistence.\nDockerfiles and Configuration Files Here are the Dockerfiles and configuration files used in the setup:\nLaravel Backend Dockerfile (laravel-11-backend/Dockerfile): FROM php:8.2-fpm RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ git \\ curl \\ libpng-dev \\ libjpeg-dev \\ libfreetype6-dev \\ zip \\ unzip \\ libonig-dev \\ libxml2-dev \\ netcat-openbsd \\ \u0026amp;\u0026amp; apt-get clean \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* # Install PHP extensions RUN docker-php-ext-configure gd --with-freetype --with-jpeg \\ \u0026amp;\u0026amp; docker-php-ext-install gd pdo pdo_mysql mbstring exif pcntl bcmath xml # Install Composer COPY --from=composer:2.2 /usr/bin/composer /usr/bin/composer # Set working directory WORKDIR /var/www/html # Copy existing application directory contents COPY . . # Copy entrypoint script COPY entrypoint.sh /usr/local/bin/entrypoint.sh RUN chmod +x /usr/local/bin/entrypoint.sh # Install Laravel dependencies RUN composer install --optimize-autoloader --no-dev # Expose port 9000 EXPOSE 9000 ENTRYPOINT [\u0026#34;/usr/local/bin/entrypoint.sh\u0026#34;] Breakdown of Laravel Backend Dockerfile:\nBase Image: php:8.2-fpm\nUses PHP 8.2 with FPM (FastCGI Process Manager) for handling PHP requests efficiently.\nDependencies Installation:\nInstalls essential packages like git, curl, zip, unzip, etc., necessary for Laravel and Composer operations. Installs specific PHP extensions (gd, pdo_mysql, mbstring, etc.) required by Laravel for image processing, database connectivity, and string manipulation.\nComposer Installation:\nCopies Composer from the Composer image (composer:2.2) into the PHP image, making it globally accessible. Allows dependency management and package installation within the container.\nWorking Directory and Application Setup:\nSets the working directory within the container to /var/www/html, the standard directory for web applications in many PHP environments. Copies all application files into the container, including Laravel\u0026rsquo;s codebase.\nPermissions and Laravel Setup:\nAdjusts file ownership (www-data:www-data) to ensure Laravel can read and write necessary files. Installs Laravel dependencies using Composer, optimizing the autoloader and excluding development packages (--optimize-autoloader --no-dev).\nPort Exposition:\nExposes port 9000 to allow PHP-FPM to communicate with Nginx for processing PHP scripts.\nEntrypoint Script:\nCopies an entrypoint script (entrypoint.sh) that waits for MySQL to be ready before executing commands like database migrations and seeding. Executes PHP-FPM to serve PHP applications.\nNginx Dockerfile (nginx/Dockerfile): FROM nginx:1.21.6 # Copy the Nginx configuration file COPY nginx.conf /etc/nginx/conf.d/default.conf # Expose port 80 EXPOSE 80 Breakdown of Nginx Dockerfile:\nBase Image: nginx:1.21.6\nUses the official Nginx image version 1.21.6 from Docker Hub as the base.\nCustom Configuration:\nCopies a custom Nginx configuration file (nginx.conf) to replace the default configuration. Configures Nginx to serve the Laravel application located in /var/www/html/public, directing traffic to PHP-FPM for PHP script processing.\nPort Exposition:\nExposes port 80 to allow external HTTP traffic to access the web application served by Nginx.\nNginx Configuration (nginx/nginx.conf): server { listen 80; server_name localhost; root /var/www/html/public; index index.php index.html; location / { try_files $uri $uri/ /index.php?$query_string; } location ~ \\.php$ { include fastcgi_params; fastcgi_pass app:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; } location ~ /\\.ht { deny all; } } React Frontend Dockerfile (react-18-frontend/Dockerfile): FROM node:18-alpine WORKDIR /usr/src/app COPY package*.json ./ RUN npm install COPY . . EXPOSE 5173 CMD [\u0026#34;npm\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;dev\u0026#34;] Breakdown of React Frontend Dockerfile:\nBase Image: node:18-alpine\nUses Node.js version 18 based on Alpine Linux, a lightweight and secure base image for Node.js applications.\nWorking Directory and Dependencies:\nSets the working directory within the container to /usr/src/app, a common practice for Node.js applications. Copies package.json and package-lock.json to install dependencies separately from application code to leverage Docker\u0026rsquo;s layer caching.\nDependency Installation:\nRuns npm install to install all dependencies listed in package.json, optimizing for Docker builds.\nApplication Setup:\nCopies all application code (COPY . .) into the container after installing dependencies. This step ensures that changes in the application code trigger rebuilds of Docker layers that depend on it, speeding up development workflows.\nPort Exposition:\nExposes port 5173, which is typically used by React\u0026rsquo;s development server (npm run dev), allowing external access during development.\nCommand to Run Application:\nSpecifies the default command (CMD) to start the application using npm run dev, which runs the React development server.\nVite Configuration If you happen to be usng vite for building your react app, make sure your Vite configuration (vite.config.js) is set up to allow the server to be accessed from outside the container. Update your vite.config.js as follows:\nimport { defineConfig } from \u0026#39;vite\u0026#39; import react from \u0026#39;@vitejs/plugin-react\u0026#39; export default defineConfig({ plugins: [react()], server: { host: true, // This allows Vite to accept connections from outside the container port: 5173, // The port Vite will run on strictPort: true, // If the port is already used, Vite will fail instead of picking another port watch: { usePolling: true, // This is needed to work well inside Docker }, }, }) Conclusion Each Dockerfile serves a crucial role in containerizing different components of your application stack. The Laravel backend Dockerfile configures PHP and Composer dependencies, the Nginx Dockerfile customizes Nginx for serving PHP applications, and the React frontend Dockerfile sets up Node.js for developing and serving React applications. Together with Docker Compose, these files orchestrate a unified development environment, ensuring consistency across different machines and simplifying the setup for your Laravel 11 and React 18 application development.\nThis setup ensures that your development environment closely mirrors your production setup, facilitating smoother deployments and collaboration.\n","date":"June 25, 2024","hero":"/images/posts/2024-06-25-how-to-dockerize-a-laravel-11-and-react-18-application-for-development.png","permalink":"http://laminsanneh.com/posts/dockerize-laravel-11-react-18-application-development/","summary":"Introduction Docker has become a popular choice for development environments due to its ability to containerize applications and simplify deployment across different systems. This guide will walk you through dockerizing a Laravel 11 backend and React 18 frontend application, using Docker Compose to orchestrate multiple services. We wil assume that your laravel and react apps live in seperate folders and will be served through different domain. Suffice to say that the react app will not be served from the laravel backend but will use the laravel backend only as an api service.","tags":[],"title":"How to Dockerize a Laravel 11 and React 18 Application for Development"},{"categories":[],"contents":"","date":"June 24, 2024","hero":"/images/personalprojects/2024-06-24-laravel-and-reactjs-user-roles-and-permissions-management-with-simple-blog.png","permalink":"http://laminsanneh.com/personalprojects/laravel-react-js-user-roles-permissions-management-simple-blog/","summary":"","tags":null,"title":"Laravel and React.Js User Roles and Permissions Management with simple Blog"},{"categories":["React.js"],"contents":"In modern web applications, managing user authentication and permissions is crucial. One effective way to handle this in React.js is by using a wrapper component. This article will guide you through creating a wrapper component that controls access to routes and links based on user roles and permissions. We will leverage Redux Toolkit to manage user state and permissions.\nPrerequisites Before we start, make sure you have the following setup:\nA React project created using Create React App. Redux Toolkit installed and configured in your project. Setting Up Redux Toolkit First, let\u0026rsquo;s set up Redux Toolkit to manage user state. Assume we have a slice called userSlice that stores user data, including their roles and permissions.\nsrc/store/slices/userSlice.js\nimport { createSlice } from \u0026#39;@reduxjs/toolkit\u0026#39;; export interface Role { id: number; name: string; } const initialState = { isAuthenticated: false, user: { roles: Role[] }, }; const userSlice = createSlice({ name: \u0026#39;user\u0026#39;, initialState, reducers: { login: (state, action) =\u0026gt; { state.isAuthenticated = true; state.user = action.payload; }, logout: (state) =\u0026gt; { state.isAuthenticated = false; state.user = { roles: [] }; }, }, }); export const { login, logout } = userSlice.actions; export default userSlice.reducer; Creating the Authentication Wrapper Component Let\u0026rsquo;s create a wrapper component that will control access to certain routes based on the user\u0026rsquo;s roles and permissions. This will allow the user to see the page if the user has atleast one of the list of required roles. For example if we supplied the ids for adminRole and editorRole as in [adminRoleId, editorRoleId] and user has role of [adminRoleId], since they have atleast one of the required roles, then they can view the page.\nsrc/components/ProtectedRoute.js\nimport React from \u0026#34;react\u0026#34;; import { Navigate } from \u0026#34;react-router-dom\u0026#34;; import { useSelector } from \u0026#39;react-redux\u0026#39;; type ProtectedRouteProps = { children: React.JSX.Element; requiredRoles: number[]; }; const ProtectedRoute: React.FC\u0026lt;ProtectedRouteProps\u0026gt; = ({ children, requiredRoles, }) =\u0026gt; { const userRoles = useSelector((state) =\u0026gt; state.user.user.roles); const isAuthenticated = useSelector((state) =\u0026gt; { return state.user.isAuthenticated; }); // Alternative syntax to the above // const { isAuthenticated, user } = useSelector((state) =\u0026gt; { // return state.user; // }); // const userRoles = user.roles; if (!isAuthenticated) { return \u0026lt;Navigate to=\u0026#34;/login\u0026#34; /\u0026gt;; } if (requiredRoles.length === 0 \u0026amp;\u0026amp; userRoles) { return children; } const userRoleIds = userRoles?.map((userRole) =\u0026gt; userRole.id); const hasRequiredRole = userRoleIds \u0026amp;\u0026amp; requiredRoles.some((role) =\u0026gt; { return userRoleIds.includes(role); }); if (!hasRequiredRole) { return \u0026lt;div\u0026gt;You do not have permission to view this page.\u0026lt;/div\u0026gt;; } return children; }; export default ProtectedRoute; Using the ProtectedRoute Component Wrap your route elements with the ProtectedRoute component to control access.\nsrc/App.ts\nimport React from \u0026#39;react\u0026#39;; import { BrowserRouter as Router, Routes, Route } from \u0026#39;react-router-dom\u0026#39;; import { useSelector } from \u0026#39;react-redux\u0026#39;; import ProtectedRoute from \u0026#39;./components/ProtectedRoute\u0026#39;; import HomePage from \u0026#39;./pages/HomePage\u0026#39;; import AdminPage from \u0026#39;./pages/AdminPage\u0026#39;; import UserDashboard from \u0026#39;./pages/UserDashboard\u0026#39;; import LoginPage from \u0026#39;./pages/LoginPage\u0026#39;; const App = () =\u0026gt; { const { isAuthenticated } = useSelector((state) =\u0026gt; state.user); // These come from backend and represent the role database id\u0026#39;s. You could query them through through an api or render them using server side rendering or // just hardcode them like here const AVAILABLE_ROLES = { ADMIN_ROLE_ID: 1, EDITOR_ROLE_ID: 2, USER_ROLE_ID: 3, }; return ( \u0026lt;Router\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/login\u0026#34; element={\u0026lt;LoginPage /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;HomePage /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/admin\u0026#34; element={ \u0026lt;ProtectedRoute requiredRoles={[AVAILABLE_ROLES.ADMIN_ROLE_ID]}\u0026gt; \u0026lt;AdminPage /\u0026gt; \u0026lt;/ProtectedRoute\u0026gt; } /\u0026gt; \u0026lt;Route path=\u0026#34;/admin\u0026#34; element={ \u0026lt;ProtectedRoute requiredRoles={[ AVAILABLE_ROLES.ADMIN_ROLE_ID, AVAILABLE_ROLES.EDITOR_ROLE_ID, AVAILABLE_ROLES.USER_ROLE_ID ]}\u0026gt; \u0026lt;UserDashboard /\u0026gt; \u0026lt;/ProtectedRoute\u0026gt; } /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/Router\u0026gt; ); }; export default App; Creating the Navigation Link Wrapper Now, let\u0026rsquo;s create a wrapper component for navigation links that will only show the link if the user has the required permissions.\nsrc/components/ProtectedLink.ts\nimport React from \u0026#34;react\u0026#34;; import { Link, To } from \u0026#34;react-router-dom\u0026#34;; import { useSelector } from \u0026#39;react-redux\u0026#39;; type ProtectedLink = { children: React.JSX.Element | string; requiredRoles: number[]; to: To; className?: string; }; const ProtectedLink: React.FC\u0026lt;ProtectedLink\u0026gt; = ({ to, requiredRoles, children, ...props }) =\u0026gt; { const userRoles = useSelector((state) =\u0026gt; state.user.user?.roles); const isAuthenticated = useSelector((state) =\u0026gt; { return state.user.isAuthenticated; }); if (!isAuthenticated) { return null; } const { className } = props; const userRoleIds = userRoles?.map((userRole) =\u0026gt; userRole.id); const hasRequiredRole = userRoleIds \u0026amp;\u0026amp; requiredRoles.some((role) =\u0026gt; { return userRoleIds.includes(role); }); if (!hasRequiredRole) { return null; } return \u0026lt;Link className={className} to={to}\u0026gt;{children}\u0026lt;/Link\u0026gt;; }; export default ProtectedLink; Using the ProtectedLink Component Use the ProtectedLink component to conditionally render navigation links.\nsrc/components/Navigation.ts\nimport React from \u0026#39;react\u0026#39;; import ProtectedLink from \u0026#39;./components/ProtectedLink\u0026#39;; // These come from backend and represent the role database id\u0026#39;s. You could query them through through an api or render them using server side rendering or // just hardcode them like here const AVAILABLE_ROLES = { ADMIN_ROLE_ID: 1, EDITOR_ROLE_ID: 2, USER_ROLE_ID: 3, }; const Navigation = () =\u0026gt; { return ( \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;ProtectedLink to=\u0026#34;/admin\u0026#34; requiredPermissions={[AVAILABLE_ROLES.ADMIN_ROLE_ID]}\u0026gt;Admin\u0026lt;/ProtectedLink\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; ); }; export default Navigation; Creating the Unprotected Navigation Link Wrapper Now, let\u0026rsquo;s create a wrapper component for navigation links that will hide the link if the user is loggedin. For example, we want to hide the login and registration links if the user is already logged in.\nsrc/components/UnProtectedLink.ts\nimport React from \u0026#34;react\u0026#34;; import { Link, To } from \u0026#34;react-router-dom\u0026#34;; import { useSelector } from \u0026#39;react-redux\u0026#39;; type UnProtectedLinkProps = { children: React.JSX.Element | string; to: To; className?: string; }; const UnProtectedLink: React.FC\u0026lt;UnProtectedLinkProps\u0026gt; = ({ to, children, ...props }) =\u0026gt; { const isAuthenticated = useSelector((state) =\u0026gt; { return state.user.isAuthenticated; }); const user = useSelector((state) =\u0026gt; { return state.user.user; }); if (isAuthenticated \u0026amp;\u0026amp; user) { return null; } const { className } = props; return \u0026lt;Link className={className} to={to}\u0026gt;{children}\u0026lt;/Link\u0026gt;; }; export default UnProtectedLink; Using the UnProtectedLink Component Use the ProtectedLink component to conditionally render navigation links.\nsrc/components/Navigation.ts\nimport React from \u0026#39;react\u0026#39;; import UnProtectedLink from \u0026#39;./components/UnProtectedLink\u0026#39;; const Navigation = () =\u0026gt; { return ( \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;UnProtectedLink to=\u0026#34;/login\u0026#34;\u0026gt;Login\u0026lt;/UnProtectedLink\u0026gt; \u0026lt;UnProtectedLink to=\u0026#34;/register\u0026#34;\u0026gt;Register\u0026lt;/UnProtectedLink\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; ); }; export default Navigation; When ever the user is logged in these links will be hidden. When the user logs out, then the will be shown\nConclusion In this article, we explored how to create wrapper components in React.js to control access to route elements and navigation links based on user authentication and roles. By leveraging Redux Toolkit and the useSelector hook, we can easily manage user data and implement permission control in a clean and efficient way.\nUsing these techniques, you can build more secure and user-friendly applications by ensuring that only authorized users can access certain parts of your application. Happy coding!\n","date":"June 23, 2024","hero":"/images/posts/2024-06-23-react-js-secure-frontend-menu-links-routes-wrapper-component-user-authentication-backend-permission-control.png","permalink":"http://laminsanneh.com/posts/react-js-user-roles-secure-frontend-menu-links-routes-wrapper-component-user-authentication-backend-permission-control/","summary":"In modern web applications, managing user authentication and permissions is crucial. One effective way to handle this in React.js is by using a wrapper component. This article will guide you through creating a wrapper component that controls access to routes and links based on user roles and permissions. We will leverage Redux Toolkit to manage user state and permissions.\nPrerequisites Before we start, make sure you have the following setup:","tags":[],"title":"React.js How to use User Roles to Secure Frontend Menu Links and Routes Using a Wrapper Component for User Authentication and Backend Permission Control"},{"categories":[],"contents":"","date":"June 22, 2024","hero":"/images/personalprojects/2024-06-22-java-springboot-backend-and-reactnative-money-transfer-android-mobile-and-web-application.png","permalink":"http://laminsanneh.com/personalprojects/java-springboot-backend-reactnative-money-transfer-android-mobile-web-application/","summary":"","tags":null,"title":"Java Springboot backend and ReactNative Money Transfer Android Mobile and Web Application"},{"categories":[],"contents":"Introduction React has undergone significant changes over the years, and one of the most notable updates is the introduction of hooks in version 16.8. Hooks allow developers to use state and other React features without writing a class. Among these hooks, useEffect stands out as a powerful replacement for the various lifecycle methods found in class components. This article will guide you through replacing class-based lifecycle methods with useEffect in functional components, complete with detailed code snippets.\nUnderstanding Class-Based Lifecycle Methods In a class component, lifecycle methods are used to perform actions at specific points in a component\u0026rsquo;s lifecycle. The primary lifecycle methods include:\ncomponentDidMount componentDidUpdate componentWillUnmount shouldComponentUpdate getDerivedStateFromProps componentDidCatch Let\u0026rsquo;s see how each of these methods works and their useEffect equivalents.\ncomponentDidMount componentDidMount is called once after the component is mounted (inserted into the tree). It\u0026rsquo;s often used for initializing data by making API calls.\nClass Component Example:\nclass MyComponent extends React.Component { componentDidMount() { // API call or any side effect console.log(\u0026#39;Component did mount\u0026#39;); } render() { return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; } } Functional Component with useEffect:\nimport React, { useEffect } from \u0026#39;react\u0026#39;; const MyComponent = () =\u0026gt; { useEffect(() =\u0026gt; { // API call or any side effect console.log(\u0026#39;Component did mount\u0026#39;); }, []); // Empty dependency array ensures this runs only once return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; }; componentDidUpdate componentDidUpdate is invoked immediately after updating occurs. It\u0026rsquo;s used to perform operations based on the changes in props or state.\nClass Component Example:\nclass MyComponent extends React.Component { componentDidUpdate(prevProps, prevState) { if (prevProps.someValue !== this.props.someValue) { // Do something with the new prop value console.log(\u0026#39;Component did update\u0026#39;); } } render() { return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; } } Functional Component with useEffect:\nimport React, { useEffect } from \u0026#39;react\u0026#39;; const MyComponent = ({ someValue }) =\u0026gt; { useEffect(() =\u0026gt; { // Do something with the new prop value console.log(\u0026#39;Component did update\u0026#39;); }, [someValue]); // Dependency array contains the prop/state to watch return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; }; componentWillUnmount componentWillUnmount is called just before the component is unmounted and destroyed. It\u0026rsquo;s used for cleanup tasks like invalidating timers or canceling network requests.\nClass Component Example:\nclass MyComponent extends React.Component { componentWillUnmount() { // Cleanup tasks console.log(\u0026#39;Component will unmount\u0026#39;); } render() { return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; } } Functional Component with useEffect:\nimport React, { useEffect } from \u0026#39;react\u0026#39;; const MyComponent = () =\u0026gt; { useEffect(() =\u0026gt; { return () =\u0026gt; { // Cleanup tasks console.log(\u0026#39;Component will unmount\u0026#39;); }; }, []); // Empty dependency array ensures this runs only once return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; }; shouldComponentUpdate shouldComponentUpdate is invoked before rendering when new props or state are being received. It allows you to prevent unnecessary renders by returning false.\nClass Component Example:\nclass MyComponent extends React.Component { shouldComponentUpdate(nextProps, nextState) { if (this.props.someValue !== nextProps.someValue) { return true; } return false; } render() { return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; } } Functional Component with React.memo:\nFor functional components, React.memo can be used to achieve a similar optimization.\nimport React, { useEffect, memo } from \u0026#39;react\u0026#39;; const MyComponent = ({ someValue }) =\u0026gt; { useEffect(() =\u0026gt; { console.log(\u0026#39;Component did update\u0026#39;); }, [someValue]); return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; }; export default memo(MyComponent, (prevProps, nextProps) =\u0026gt; { return prevProps.someValue === nextProps.someValue; }); getDerivedStateFromProps getDerivedStateFromProps is invoked right before calling the render method, both on the initial mount and on subsequent updates. It allows the state to be updated based on the props.\nClass Component Example:\nclass MyComponent extends React.Component { static getDerivedStateFromProps(nextProps, prevState) { if (nextProps.someValue !== prevState.someValue) { return { someValue: nextProps.someValue }; } return null; } render() { return \u0026lt;div\u0026gt;{this.state.someValue}\u0026lt;/div\u0026gt;; } } Functional Component with useEffect:\nWhile getDerivedStateFromProps has no direct equivalent, useEffect can be used to achieve a similar result.\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; const MyComponent = ({ someValue }) =\u0026gt; { const [value, setValue] = useState(someValue); useEffect(() =\u0026gt; { setValue(someValue); }, [someValue]); return \u0026lt;div\u0026gt;{value}\u0026lt;/div\u0026gt;; }; componentDidCatch componentDidCatch is used to handle errors in their component tree.\nClass Component Example:\nclass MyComponent extends React.Component { componentDidCatch(error, info) { // Handle error console.log(\u0026#39;Error caught:\u0026#39;, error, info); } render() { return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; } } Functional Component with Error Boundary:\nAs of now, there isn\u0026rsquo;t a direct hook equivalent for componentDidCatch. Instead, you can use an Error Boundary component.\nimport React, { Component } from \u0026#39;react\u0026#39;; class ErrorBoundary extends Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { return { hasError: true }; } componentDidCatch(error, errorInfo) { console.log(\u0026#39;Error caught:\u0026#39;, error, errorInfo); } render() { if (this.state.hasError) { return \u0026lt;h1\u0026gt;Something went wrong.\u0026lt;/h1\u0026gt;; } return this.props.children; } } export default ErrorBoundary; Then wrap your component with ErrorBoundary:\nimport React from \u0026#39;react\u0026#39;; import ErrorBoundary from \u0026#39;./ErrorBoundary\u0026#39;; const MyComponent = () =\u0026gt; { return \u0026lt;div\u0026gt;My Component\u0026lt;/div\u0026gt;; }; const App = () =\u0026gt; ( \u0026lt;ErrorBoundary\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;/ErrorBoundary\u0026gt; ); Conclusion With the introduction of hooks, especially useEffect, React has made it easier and more intuitive to manage component lifecycle methods in functional components. This shift not only simplifies code but also promotes better practices by encouraging separation of concerns and cleaner component logic. By following the examples provided, you can effectively replace class-based lifecycle methods with useEffect in your React applications.\n","date":"June 21, 2024","hero":"/images/posts/2024-06-21-how-to-use-react-js-useeffect-to-replace-class-based-lifecycle-methods.png","permalink":"http://laminsanneh.com/posts/react-js-useeffect-replace-class-based-lifecycle-methods/","summary":"Introduction React has undergone significant changes over the years, and one of the most notable updates is the introduction of hooks in version 16.8. Hooks allow developers to use state and other React features without writing a class. Among these hooks, useEffect stands out as a powerful replacement for the various lifecycle methods found in class components. This article will guide you through replacing class-based lifecycle methods with useEffect in functional components, complete with detailed code snippets.","tags":[],"title":"How to Use React.js useEffect to Replace Class-Based Lifecycle Methods"},{"categories":[],"contents":"","date":"June 20, 2024","hero":"/images/personalprojects/2024-06-20-laravel-and-reactnative-medical-appintment-app.png","permalink":"http://laminsanneh.com/personalprojects/laravel-reactnative-medical-appintment-app/","summary":"","tags":null,"title":"Laravel and ReactNative Medical Appintment App"},{"categories":[],"contents":"Introduction Creating a dynamic multi-checkbox system in React.js can be a powerful way to allow users to select multiple options, such as user roles, in an intuitive and interactive manner. In this blog post, we\u0026rsquo;ll walk through a complete example of how to implement such a system, focusing on updating the state based on user interactions and fetching initial data from an external source. Let\u0026rsquo;s dive into the code and explore each part of the implementation.\nComponent Overview The component we\u0026rsquo;ll be discussing is MyUserRolesComponent, which allows users to select multiple roles via checkboxes. The component initializes with all checkboxes unchecked and updates its state as users interact with it. Additionally, it fetches existing role data for a user from a server and updates the checkboxes accordingly.\nHere\u0026rsquo;s the full component code for reference:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39;; function MyUserRolesComponent () { // By default all checkbox values are set to false const selectedRoleValues = { 1: false, 2: false, 3: false }; // component state for holding the selected roles in the dom const [selectedRoles, setSelectedRoles] = useState\u0026lt;{[index: number]: boolean}\u0026gt;(selectedRoleValues); // handler which updates the state selectedRoles whenever a user checks or unchecks a role const onSelectedRoleChange = (roleId: number) =\u0026gt; { setSelectedRoles({...selectedRoles, ...{[roleId]: !selectedRoles[roleId]}}); } useEffect(() =\u0026gt; { let ignoreFetchedUserData = false; if (!route.id) { return; } dispatch(fetchUser(Number.parseInt(route.id, 10))) .unwrap() .then((response) =\u0026gt; { if (ignoreFetchedUserData) { // this is the result of the server call using some reducer action which returns the user roles from some server // for now, we abstract the function call const roles: {[index: number]: boolean}[] = response.roles; const selectedRolesFromServer = Object.assign({}, ...roles.map(role =\u0026gt; ({ [role.id]: true }))); // here we update the selectedRoles state by overriding it with some values from the server setSelectedRoles({...selectedRoles, ...selectedRolesFromServer}); } }) .catch(() =\u0026gt; { console.log(\u0026#34;Error fetching user\u0026#34;); }); return () =\u0026gt; { console.log(\u0026#34;Clearing Use effect\u0026#34;); ignoreFetchedUserData = true; }; }, [route, dispatch]); return ( \u0026lt;div\u0026gt; { availableRoles.map((role) =\u0026gt; { return ( \u0026lt;label key={role.id}\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; checked={selectedRoles[role.id]} onChange={() =\u0026gt; { onSelectedRoleChange(role.id); }} /\u0026gt;{\u0026#34; \u0026#34;} {role.name} \u0026lt;/label\u0026gt; ); }) } \u0026lt;/div\u0026gt; ); } export default MyUserRolesComponent; Lets now dive deeper and explain each part:\nState Initialization We start by initializing the state for the checkboxes. Each checkbox corresponds to a user role, identified by a unique ID. Initially, all checkboxes are set to false (unchecked).\nconst selectedRoleValues = { 1: false, 2: false, 3: false }; const [selectedRoles, setSelectedRoles] = useState\u0026lt;{[index: number]: boolean}\u0026gt;(selectedRoleValues); Handling Checkbox Changes The onSelectedRoleChange function is a handler that toggles the checked state of a checkbox when it is clicked. It updates the state by flipping the boolean value of the corresponding role ID.\nconst onSelectedRoleChange = (roleId: number) =\u0026gt; { setSelectedRoles({...selectedRoles, ...{[roleId]: !selectedRoles[roleId]}}); } Fetching Initial Data The useEffect hook is used to fetch the initial roles from the server when the component mounts. It updates the state with the roles fetched for the user, allowing the component to reflect the existing data.\nuseEffect(() =\u0026gt; { let ignoreFetchedUserData = false; if (!route.id) { return; } dispatch(fetchUser(Number.parseInt(route.id, 10))) .unwrap() .then((response) =\u0026gt; { if (!ignoreFetchedUserData) { const roles: {[index: number]: boolean}[] = response.roles; const selectedRolesFromServer = Object.assign({}, ...roles.map(role =\u0026gt; ({ [role.id]: true }))); setSelectedRoles({...selectedRoles, ...selectedRolesFromServer}); } }) .catch(() =\u0026gt; { console.log(\u0026#34;Error fetching user\u0026#34;); }); return () =\u0026gt; { console.log(\u0026#34;Clearing Use effect\u0026#34;); ignoreFetchedUserData = true; }; }, [route, dispatch]); Rendering Checkboxes Finally, the component renders a list of checkboxes based on the availableRoles array. Each checkbox is controlled by the state, and clicking a checkbox triggers the onSelectedRoleChange handler.\nreturn ( \u0026lt;div\u0026gt; { availableRoles.map((role) =\u0026gt; { return ( \u0026lt;label key={role.id}\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; checked={selectedRoles[role.id]} onChange={() =\u0026gt; { onSelectedRoleChange(role.id); }} /\u0026gt;{\u0026#34; \u0026#34;} {role.name} \u0026lt;/label\u0026gt; ); }) } \u0026lt;/div\u0026gt; ); Conclusion By following the steps outlined above, you can create a dynamic multi-checkbox system in React.js that seamlessly handles user interactions and updates based on external data. This approach ensures that your component is both user-friendly and robust, capable of reflecting the current state of user roles accurately.\nFeel free to extend this example by adding more features, such as saving the selected roles back to the server or adding additional input validation. Happy coding!\n","date":"June 19, 2024","hero":"/images/posts/2024-06-19-how-to-make-a-dynamic-multi-checkbox-system-in-react.js-seamlessly.png","permalink":"http://laminsanneh.com/posts/dynamic-multi-checkbox-system-react-js-seamlessly/","summary":"Introduction Creating a dynamic multi-checkbox system in React.js can be a powerful way to allow users to select multiple options, such as user roles, in an intuitive and interactive manner. In this blog post, we\u0026rsquo;ll walk through a complete example of how to implement such a system, focusing on updating the state based on user interactions and fetching initial data from an external source. Let\u0026rsquo;s dive into the code and explore each part of the implementation.","tags":[],"title":"How to Make a Dynamic Multi Checkbox System in React.js Seamlessly"},{"categories":[],"contents":"Introduction Securing your application data is a crucial aspect of building robust web applications. Laravel 11 provides a powerful mechanism to handle authorization through Gates and Policies. This post will guide you through the process of using Gates and Policies to secure your application data within a controller, using a Post model as an example.\nWhat are Gates and Policies? Gates and Policies are two complementary features in Laravel that help in authorizing actions. Gates provide a simple closure-based approach to authorization, whereas Policies are dedicated classes that group authorization logic for a specific model or resource.\nDefining a Policy In Laravel, a Policy is a class that contains authorization logic for a particular model. Let\u0026rsquo;s define a PostPolicy to manage authorization for viewing, updating, and deleting posts.\nPostPolicy.php\n\u0026lt;?php namespace App\\Policies; use App\\Models\\Post; use App\\Models\\User; class PostPolicy { /** * Determine whether the user can view the model. */ public function view(User $user, Post $post): bool { return $user-\u0026gt;isAdmin() || $user-\u0026gt;isEditor() || $post-\u0026gt;author_id == $user-\u0026gt;id; } /** * Determine whether the user can update the model. */ public function update(User $user, Post $post): bool { return $user-\u0026gt;isAdmin() || $user-\u0026gt;isEditor() || $post-\u0026gt;author_id === $user-\u0026gt;id; } /** * Determine whether the user can delete the model. */ public function delete(User $user, Post $post): bool { return $user-\u0026gt;isAdmin() || $user-\u0026gt;isEditor() || $post-\u0026gt;author_id === $user-\u0026gt;id; } } In this PostPolicy class, the methods view, update, and delete determine if a user can perform these actions based on their role (admin or editor) or if they are the author of the post.\nApplying Policies in a Controller To use these policies in your controller, you will leverage the Gate::authorize method. This method checks the authorization and throws an exception if the user is not authorized.\nPostController.php\n\u0026lt;?php namespace App\\Http\\Controllers; use App\\Models\\Post; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Gate; use InvalidArgumentException; class PostsController extends Controller { public function find(int $postId) { $post = Post::find($postId); Gate::authorize(\u0026#39;view\u0026#39;, $post); return response()-\u0026gt;json($post); } public function update(Request $request, int $postId) { $data = $request-\u0026gt;only([\u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;]); $post = Post::with(\u0026#39;author\u0026#39;)-\u0026gt;find($postId); Gate::authorize(\u0026#39;update\u0026#39;, $post); $post-\u0026gt;update($data); return response()-\u0026gt;json($post); } public function delete(int $postId) { $post = Post::find($postId); Gate::authorize(\u0026#39;delete\u0026#39;, $post); $deleted = $post-\u0026gt;delete(); if (!$deleted) { throw new InvalidArgumentException(\u0026#39;Could Not Delete Post\u0026#39;); } return response()-\u0026gt;json(); } } In this PostsController class:\nThe find method retrieves a post and authorizes the \u0026lsquo;view\u0026rsquo; action. The update method updates a post after authorizing the \u0026lsquo;update\u0026rsquo; action. The delete method deletes a post after authorizing the \u0026lsquo;delete\u0026rsquo; action. If the current user is not authorized to perform the action, Gate::authorize will throw an AuthorizationException, effectively preventing unauthorized access.\nManually Handling Authorization Failures While Gate::authorize is convenient, it throws an exception when the check fails, but there are scenarios where you might want to manually handle the failure of an authorization check. For example, you might want to return a custom error message or perform some other action.\nManual Authorization Check Here\u0026rsquo;s how you can manually handle authorization failures in a controller method:\n\u0026lt;?php namespace App\\Http\\Controllers; use App\\Models\\Post; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Gate; use InvalidArgumentException; class PostsController extends Controller { public function create(Request $request) { if ($request-\u0026gt;user()-\u0026gt;cannot(\u0026#39;create\u0026#39;, Post::class)) { abort(403, \u0026#39;You are not authorized to create a post\u0026#39;); } // Proceed with post creation $data = $request-\u0026gt;only([\u0026#39;title\u0026#39;, \u0026#39;body\u0026#39;]); $post = Post::create($data); return response()-\u0026gt;json($post); } // Other methods (find, update, delete)... } In this create method, we manually check if the user has permission to create a post using $request-\u0026gt;user()-\u0026gt;cannot('create', Post::class). If the user is not authorized, we use abort(403, \u0026lsquo;You are not authorized to create a post\u0026rsquo;) to return a 403 Forbidden response with a custom message.\nDefining Gates Gates can be defined in the AuthServiceProvider or anywhere in your application bootstrapping process. Here’s how to define gates using both closure and policy methods.\nClosure-Based Gates You can define a gate using a closure in the AuthServiceProvider:\nuse Illuminate\\Support\\Facades\\Gate; use App\\Models\\Post; use App\\Models\\User; /** * Register any authentication / authorization services. * * @return void */ public function boot() { $this-\u0026gt;registerPolicies(); Gate::define(\u0026#39;update\u0026#39;, function (User $user, Post $post) { return $user-\u0026gt;id === $post-\u0026gt;author_id; }); } This gate checks if the user’s ID matches the author ID of the post.\nPolicy-Based Gates You can also define a gate to use a specific method from a policy:\nuse Illuminate\\Support\\Facades\\Gate; use App\\Policies\\PostPolicy; /** * Register any authentication / authorization services. * * @return void */ public function boot() { $this-\u0026gt;registerPolicies(); Gate::define(\u0026#39;update\u0026#39;, [PostPolicy::class, \u0026#39;update\u0026#39;]); } This gate uses the update method from the PostPolicy class to perform the authorization check.\nWe have attached the PostPolicy as a handler for the PostModel, but if we created a policy class using a convention of [ModelName][Policy], this definition would not be necessary if the gate name update and policy method handler update are the same.\nThis is because using the convention to name your policy Laravel will discover the policy and link it to the model used in the name automatically, given that it is in the policies folder. However, if for example in this example above we wanted to not use the covention and use a policy class like DraftPostPolicy and our post model is called Post, then Laravel will not pick it up automatically, that is when the code snippet above is neccessary, so instead we\u0026rsquo;d do something like:\nuse Illuminate\\Support\\Facades\\Gate; use App\\Policies\\DraftPostPolicy; /** * Register any authentication / authorization services. * * @return void */ public function boot() { $this-\u0026gt;registerPolicies(); Gate::define(\u0026#39;update\u0026#39;, [DraftPostPolicy::class, \u0026#39;update\u0026#39;]); } Using Gates at the Route Level Laravel also allows you to apply gates directly in route definitions using middlewares. This approach is helpful for simple authorization checks that can be defined directly within your route declarations.\nMiddleware-Based Authorization in Routes You can use the can middleware to check authorizations at the route level:\nuse App\\Models\\Post; Route::put(\u0026#39;/post/{post}\u0026#39;, function (Post $post) { // The current user may update the post... })-\u0026gt;middleware(\u0026#39;can:update,post\u0026#39;); Route::post(\u0026#39;/post\u0026#39;, function () { // The current user may create posts... })-\u0026gt;middleware(\u0026#39;can:create,App\\Models\\Post\u0026#39;); In these examples:\nThe PUT /post/{post} route uses the can:update,post middleware to ensure the user can update the specified post. The POST /post route uses the can:create,App\\Models\\Post middleware to ensure the user can create a new post. Route Method Authorization You can also use the can method directly in your route definition:\nuse App\\Models\\Post; Route::post(\u0026#39;/post\u0026#39;, function () { // The current user may create posts... })-\u0026gt;can(\u0026#39;create\u0026#39;, Post::class); This example checks if the current user can create a post before executing the route\u0026rsquo;s closure.\nUsing Gates at the Blade Template Level Laravel\u0026rsquo;s Blade templating engine makes it easy to include authorization checks directly in your views. You can use the @can, @cannot, @elsecan, and @else directives to conditionally display content based on the user\u0026rsquo;s permissions.\nBlade Example Here’s how you can use Gates at the Blade template level:\n@can(\u0026#39;update\u0026#39;, $post) \u0026lt;!-- The current user can update the post... --\u0026gt; @endcan @can(\u0026#39;create\u0026#39;, App\\Models\\Post::class) \u0026lt;!-- The current user can create new posts... --\u0026gt; @endcan @cannot(\u0026#39;delete\u0026#39;, $post) \u0026lt;!-- The current user cannot delete this post... --\u0026gt; @endcannot @elsecan(\u0026#39;create\u0026#39;, App\\Models\\Post::class) \u0026lt;!-- The current user can create new posts... --\u0026gt; @else \u0026lt;!-- The current user cannot update or create posts... --\u0026gt; @endcan In this example:\n@can('update', $post) checks if the current user can update the given post. @can('create', App\\Models\\Post::class) checks if the current user can create a new post. @cannot('delete', $post) checks if the current user cannot delete the given post. @elsecan('create', App\\Models\\Post::class) provides an alternative block if the user can create a post but not update or delete. @else is used as a fallback for users who do not meet any specified conditions. Registering Policies To ensure Laravel knows about your policies, you need to register them in the AuthServiceProvider.\nAuthServiceProvider.php\n\u0026lt;?php namespace App\\Providers; use App\\Models\\Post; use App\\Policies\\PostPolicy; use Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider; class AuthServiceProvider extends ServiceProvider { /** * The policy mappings for the application. * * @var array */ protected $policies = [ Post::class =\u0026gt; PostPolicy::class, ]; /** * Register any authentication / authorization services. * * @return void */ public function boot() { $this-\u0026gt;registerPolicies(); } } Here, we map the Post model to the PostPolicy class.\nWe have attached the PostPolicy as a handler for the Post Model, but if we created a policy class using a convention of [ModelName][Policy], this definition in the AuthServiceProvider would not be necessary as laravel will discover it automatically, given that it is in the policies folder. However, if for example in this example above we wanted to not use the covention and use a policy class like DraftPostPolicy and our post model is called Post, then Laravel will not pick it up automatically, that is when the code snippet above is neccessary, so instead we\u0026rsquo;d do something like:\nprotected $policies = [ Post::class =\u0026gt; DraftPostPolicy::class, ]; Conclusion By using Laravel 11\u0026rsquo;s Gates and Policies, you can implement robust security measures in your application. Policies allow you to encapsulate authorization logic in dedicated classes, keeping your controllers clean and focused. The Gate::authorize method ensures that only authorized users can perform specific actions, throwing exceptions for unauthorized attempts. Additionally, manually handling authorization failures provides flexibility to customize responses and actions based on your application\u0026rsquo;s needs. Defining gates in the AuthServiceProvider allows you to centralize and manage your authorization logic effectively.\nApplying authorization at the route level using middleware and the can method ensures a clean and declarative approach to securing your routes. This method enhances the readability and maintainability of your route definitions while providing robust security. Furthermore, using gates within Blade templates ensures that only authorized content is rendered, enhancing the user experience and security of your application.\nThis approach not only secures your application data but also makes your authorization logic reusable and easy to maintain. Happy coding!\n","date":"June 18, 2024","hero":"/images/posts/2024-06-18-how-to-use-laravel-11-gates-and-policies-to-secure-your-application-data-through-your-controllers-and-routes.png","permalink":"http://laminsanneh.com/posts/laravel-11-gates-policies-secure-application-data-controllers-routes/","summary":"Introduction Securing your application data is a crucial aspect of building robust web applications. Laravel 11 provides a powerful mechanism to handle authorization through Gates and Policies. This post will guide you through the process of using Gates and Policies to secure your application data within a controller, using a Post model as an example.\nWhat are Gates and Policies? Gates and Policies are two complementary features in Laravel that help in authorizing actions.","tags":[],"title":"How to Use Laravel 11 Gates and Policies to Secure Your Application Data through Your Controllers and Routes"},{"categories":["React.js"],"contents":"Using typescript and integrating React Redux toolkit into your React application can enhance your state management, making your app more robust and scalable. Redux Toolkit simplifies this process by providing a set of tools and best practices. This guide will walk you through setting up Redux Toolkit in a React application, understanding its key components, and effectively using it to manage your app\u0026rsquo;s state.\nStep 1: Setting Up Redux Toolkit npm install @reduxjs/toolkit react-redux Configuring the Store In your project, create a file named store.ts for setting up the Redux store and reducers.\nstore.ts\nimport { combineReducers } from \u0026#34;redux\u0026#34;; import postSlice from \u0026#34;./slices/postSlice\u0026#34;; import userSlice from \u0026#34;./slices/userSlice\u0026#34;; import { configureStore } from \u0026#34;@reduxjs/toolkit\u0026#34;; import { useDispatch, useSelector, useStore } from \u0026#34;react-redux\u0026#34;; // Combine your slice reducers const rootReducer = combineReducers({ post: postSlice, user: userSlice, // We wont implement this slice, but leaving here to show that multiple reducers can be combined this way }); // Configure the store export const store = configureStore({ reducer: rootReducer, }); // Define types for RootState, AppDispatch, and AppStore export type RootState = ReturnType\u0026lt;typeof store.getState\u0026gt;; export type AppDispatch = typeof store.dispatch; export type AppStore = typeof store; // Custom hooks to use throughout your app export const useAppDispatch = useDispatch.withTypes\u0026lt;AppDispatch\u0026gt;(); export const useAppSelector = useSelector.withTypes\u0026lt;RootState\u0026gt;(); export const useAppStore = useStore.withTypes\u0026lt;AppStore\u0026gt;(); In this setup, combineReducers is used to combine postSlice and userSlice reducers into a single root reducer. The configureStore function from Redux Toolkit is then used to create the store.\nStep 2: Creating Slices Slices in Redux Toolkit combine the reducer logic and actions into a single file. Let\u0026rsquo;s create a postSlice to manage the state of posts in your application.\nslices/postSlice.ts\nimport { createAsyncThunk, createSlice } from \u0026#34;@reduxjs/toolkit\u0026#34;; import axios from \u0026#34;axios\u0026#34;; import { Post } from \u0026#34;../types\u0026#34;; // Assuming you have a Post type defined // Async thunk for fetching posts export const fetchPosts = createAsyncThunk\u0026lt;Post[], void\u0026gt;( \u0026#34;post/fetchPosts\u0026#34;, async () =\u0026gt; { try { const response = await axios.get(\u0026#34;http://localhost:8000/api/posts\u0026#34;); return response.data; } catch (error) { throw new Error(\u0026#34;Failed to get posts data\u0026#34;); } } ); // Initial state const initialState = { posts: [], loading: false, error: null, }; // Create the post slice const postSlice = createSlice({ name: \u0026#34;post\u0026#34;, initialState, reducers: {}, extraReducers: (builder) =\u0026gt; { builder .addCase(fetchPosts.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(fetchPosts.fulfilled, (state, action) =\u0026gt; { state.loading = false; state.posts = action.payload; }) .addCase(fetchPosts.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to load posts\u0026#34;; }); }, }); export default postSlice.reducer; Here, createAsyncThunk is used to handle asynchronous actions. This function helps to manage different states like pending, fulfilled, and rejected. The slice manages the state changes in response to these actions.\nStep 3: Integrating Redux Store with React To use the Redux store in your React app, wrap your root component with the Provider component from react-redux.\nApp.tsx\nimport React from \u0026#34;react\u0026#34;; import { Provider } from \u0026#34;react-redux\u0026#34;; import { store } from \u0026#34;./store.ts\u0026#34;; import YourComponent from \u0026#34;./YourComponent\u0026#34;; // Import your main component const App: React.FC = () =\u0026gt; { return ( \u0026lt;Provider store={store}\u0026gt; \u0026lt;YourComponent /\u0026gt; \u0026lt;/Provider\u0026gt; ); }; export default App; Wrapping your application with the Provider component makes the Redux store available to all components in your app.\nStep 4: Using Custom Hooks for State and Dispatch To interact with the Redux store, use the custom hooks useAppDispatch and useAppSelector that you defined in store.ts.\nExample Usage in a Component\nimport React, { useEffect } from \u0026#34;react\u0026#34;; import { useAppDispatch, useAppSelector } from \u0026#34;./store\u0026#34;; import { fetchPosts } from \u0026#34;./slices/postSlice\u0026#34;; const PostList: React.FC = () =\u0026gt; { const dispatch = useAppDispatch(); const { posts, loading, error } = useAppSelector((state) =\u0026gt; state.post); useEffect(() =\u0026gt; { dispatch(fetchPosts()); }, [dispatch]); if (loading) { return \u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;; } if (error) { return \u0026lt;div\u0026gt;Error: {error}\u0026lt;/div\u0026gt;; } return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; {posts.map((post) =\u0026gt; ( \u0026lt;li key={post.id}\u0026gt;{post.title}\u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); }; export default PostList; In this component, useAppDispatch is used to dispatch the fetchPosts action, and useAppSelector is used to select the post state from the Redux store.\nConclusion By following these steps, you can set up Redux Toolkit in your React application to manage your state efficiently. Redux Toolkit streamlines the process of writing Redux logic, making your code cleaner and easier to maintain. Happy coding!\n","date":"June 18, 2024","hero":"/images/posts/2024-06-18-react-redux-toolkit-how-to-set-up,-understand,-and-use-the-library-in-your-react.js-app.png","permalink":"http://laminsanneh.com/posts/react-redux-toolkit-typescript-set-understand-library-react-js-app/","summary":"Using typescript and integrating React Redux toolkit into your React application can enhance your state management, making your app more robust and scalable. Redux Toolkit simplifies this process by providing a set of tools and best practices. This guide will walk you through setting up Redux Toolkit in a React application, understanding its key components, and effectively using it to manage your app\u0026rsquo;s state.\nStep 1: Setting Up Redux Toolkit npm install @reduxjs/toolkit react-redux Configuring the Store In your project, create a file named store.","tags":[],"title":"React Redux Toolkit with Typescript How to Set Up, Understand, and Use the library in Your React.js App"},{"categories":["React.js"],"contents":"To prevent out-of-sync React Redux toolkit dispatches or just plain react.js in general which could result in unexpected behaviors due to asynchronous server requests returning at different times, we need to ensure that we handle component unmounts or updates correctly. This ensures that when a component re-renders or unmounts, for several reasons like a user clicks on another link related to the same component, it does not attempt to set state based on outdated or irrelevant asynchronous responses.\nThis weird behaviour could result in items from the old server request being rendered or screen flicks happening.\nLet\u0026rsquo;s break down the example code below analyze its current behavior:\nProblem Immediate Re-renders: If route or dispatch change frequently, it may cause the useEffect to re-run multiple times in quick succession, potentially leading to multiple pending asynchronous requests. This can result in race conditions where responses are handled in an unexpected order. import { useState, useEffect } from \u0026#39;react\u0026#39;; import { useParams } from \u0026#34;react-router-dom\u0026#34;; function MyComponent({ route, dispatch }) { const [postData, setPostData] = useState({ title: \u0026#39;\u0026#39;, body: \u0026#39;\u0026#39; }); const route = useParams(); useEffect(() =\u0026gt; { let isMounted = true; // Tracks whether the component is still mounted if (!route.id) { return; } const fetchData = async () =\u0026gt; { try { const response = await dispatch(fetchPost(Number.parseInt(route.id, 10))).unwrap(); if (isMounted) { // Only update state if still mounted setPostData({ title: response.title, body: response.body }); } } catch (error) { console.log(\u0026#34;Error fetching post\u0026#34;); } }; fetchData(); return () =\u0026gt; { isMounted = false; // Set flag to false on cleanup console.log(\u0026#34;Clearing Use effect\u0026#34;); }; }, [route.id, dispatch]); // Only re-run if route.id or dispatch changes return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{postData.title}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{postData.body}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } How it works and Solution: isMounted Flag: Using a flag (isMounted) to check if the component is still mounted before updating the state ensures that the component does not attempt to update its state after it has been unmounted.\nDependency Array: Only includes route.id and dispatch, reducing unnecessary re-renders.\nCleanup Function: On component unmount or dependency change, the cleanup function runs, setting isMounted to false. This ensures that any ongoing asynchronous operation does not attempt to update the state if the component is no longer mounted or if the dependencies have changed.\nConclusion Using a flag to track whether the component is still mounted before updating the state within an asynchronous operation ensures that state updates are only attempted when the component is active. This prevents the weird behaviors that can arise from asynchronous operations trying to update an unmounted or quickly re-rendered component.\n","date":"June 18, 2024","hero":"/images/posts/2024-06-18-react-js-useeffect-prevent-component-weird.png","permalink":"http://laminsanneh.com/posts/react-js-useeffect-prevent-component-weird-bahaviour-due-multiple-order-server-fetches/","summary":"To prevent out-of-sync React Redux toolkit dispatches or just plain react.js in general which could result in unexpected behaviors due to asynchronous server requests returning at different times, we need to ensure that we handle component unmounts or updates correctly. This ensures that when a component re-renders or unmounts, for several reasons like a user clicks on another link related to the same component, it does not attempt to set state based on outdated or irrelevant asynchronous responses.","tags":[],"title":"React.js useEffect How to prevent component weird bahaviour due to multiple out of order server fetches"},{"categories":["Laravel","React.js"],"contents":"Introduction In this tutorial, we will be setting up an indepth tutorial guide of react.js and laravel 11 system for user authentication and registration. We will be using typescript on the react.js frontned, along with react redux toolkit, but do not worry as youc an follow along even if you only know javascript. React redux toolkit helps with state management. It might be overkill for a simple login registration app like this, but makes life very easy once the app codebase grows. Users will be able to register using an email as their username and password. After successful registration, they shall be able to login. We wil demonstrate the login mechanism by having a userpforile area/route in the frontend of the application which will be locked and only accessible to logged in. The frontend and backend will be on different domains, so the after logging in, we will provide the user with a token, which will be stored in localstorage of the browser. This will be send along in the header each request which requires authentication to get data back from the server. We will also need to setup cors so that our frontend domain can send requests to the backend domanin app.\nProject Structure Firstly, please clone the starter repositories here, one for the laravel backend and one for the react frontend. Put each of them in a separate folder. We already have all tthe required libraries added on the frontend inside package.json as listed below.\n- react-dom\u0026#34;: \u0026#34;^18.2.0\u0026#34;, - \u0026#34;@reduxjs/toolkit\u0026#34;: \u0026#34;^2.2.1\u0026#34;, - \u0026#34;axios\u0026#34;: \u0026#34;^1.6.7\u0026#34;, - \u0026#34;react-redux\u0026#34;: \u0026#34;^9.1.0\u0026#34;, - \u0026#34;react-router-dom\u0026#34;: \u0026#34;^6.22.3\u0026#34;, - \u0026#34;redux\u0026#34;: \u0026#34;^5.0.1\u0026#34; I used vite to create the frontend project and composer to create the backend project in two seperate folders. An alternative would have been to host the react project directly inside the laravel project folder, hence having one domain for both frontend and backend, but we won;t be doibg that in this tutorial. Possibly, we may do it in another blog post.\nFrontend In the terminal, move inside the frontend folder using cd your-frontend-folder and run npm install. After successfully installing the libraries, run npm run dev to start the frontend server. Verify that the server is running at http://localhost:5173/.\nCreate components for LoginComponent.tsx and RegisterComponent.tsx and UserProfileComponent.tsx Create a component in src/components as below:\nsrc/components/LoginComponent.tsx\nimport React from \u0026#34;react\u0026#34;; import \u0026#34;./LoginComponent.css\u0026#34;; const LoginComponent = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Login\u0026lt;/h2\u0026gt; \u0026lt;form className=\u0026#34;login-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; placeholder=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default LoginComponent; with css file src/components/LoginComponent.css:\n.login-form label { display: block; margin-bottom: 10px; } .login-form label input { padding: 10px; } Create a component in src/components/RegisterComponent.tsx\nimport React from \u0026#34;react\u0026#34;; import \u0026#34;./RegisterComponent.css\u0026#34;; const RegisterComponent = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Register\u0026lt;/h2\u0026gt; \u0026lt;form className=\u0026#34;register-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; placeholder=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Register\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default RegisterComponent; with css file src/components/RegisterComponent.css:\n.register-form label { display: block; margin-bottom: 10px; } .register-form input { padding: 10px; } Create a component in src/components/UserProfileComponent.tsx\nimport React from \u0026#34;react\u0026#34;; import \u0026#34;./UserProfileComponent.css\u0026#34;; const UserProfileComponent = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Profile\u0026lt;/h2\u0026gt; \u0026lt;form className=\u0026#34;update-profile-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;phone\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;phone\u0026#34; id=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;address\u0026#34;\u0026gt; \u0026lt;textarea id=\u0026#34;address\u0026#34; placeholder=\u0026#34;address\u0026#34; \u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Update Profie\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default UserProfileComponent; with css file src/components/UserProfileComponent.css:\n.update-profile-form label { display: block; margin-bottom: 10px; } .update-profile-form input, .update-profile-form textarea { padding: 10px; } Add routes and links for Login, Register and UdateProfile Modify App.tsx like below to add the three links for the different components.\nimport \u0026#34;./App.css\u0026#34;; import { Link, Route, BrowserRouter, Routes } from \u0026#34;react-router-dom\u0026#34;; import LoginComponent from \u0026#34;./components/LoginComponent\u0026#34;; import RegisterComponent from \u0026#34;./components/RegisterComponent\u0026#34;; import UserProfileComponent from \u0026#34;./components/UserProfileComponent\u0026#34;; function App() { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;Link to={\u0026#34;login\u0026#34;}\u0026gt;Login\u0026lt;/Link\u0026gt;\u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;Link to={\u0026#34;register\u0026#34;}\u0026gt;Register\u0026lt;/Link\u0026gt;\u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;Link to={\u0026#34;profile\u0026#34;}\u0026gt;Profile\u0026lt;/Link\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;LoginComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/login\u0026#34; element={\u0026lt;LoginComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/register\u0026#34; element={\u0026lt;RegisterComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/profile\u0026#34; element={\u0026lt;UserProfileComponent /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); } export default App; Create reducers for handling login and registration Create a file in src/store/slices/authReducer.ts\nimport { createAsyncThunk, createSlice } from \u0026#34;@reduxjs/toolkit\u0026#34;; import { makeLoginUserRequest, makeRegisterUserRequest } from \u0026#34;../../services/authService\u0026#34;; export interface LoginUserData { email: string; password: string; } export interface RegisterUserData { name: string; email: string; password: string; } interface AuthState { loading: boolean; error: string | null; token: string | null; isAuthenticated: boolean; } const initialState: AuthState = { loading: false, error: null, token: null, isAuthenticated: false, }; export const loginUser = createAsyncThunk\u0026lt;string, LoginUserData\u0026gt;( \u0026#34;auth/loginUser\u0026#34;, async (credentials) =\u0026gt; { return await makeLoginUserRequest(credentials); } ); export const registerUser = createAsyncThunk\u0026lt;void, RegisterUserData\u0026gt;( \u0026#34;auth/registerUser\u0026#34;, async (credentials) =\u0026gt; { return await makeRegisterUserRequest(credentials); } ); const authSlice = createSlice({ name: \u0026#34;auth\u0026#34;, initialState, reducers: {}, extraReducers: (builder) =\u0026gt; { builder .addCase(loginUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(loginUser.fulfilled, (state, action) =\u0026gt; { state.loading = false; state.token = action.payload; }) .addCase(loginUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to login user\u0026#34;; }) .addCase(registerUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(registerUser.fulfilled, (state) =\u0026gt; { state.loading = false; }) .addCase(registerUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to register user\u0026#34;; }) .addDefaultCase(() =\u0026gt; {}); }, }); export default authSlice.reducer; Then create the corresponding service file, src/services/authService.ts which will actually make the API HTTP calls to our laravel backend:\nimport axios from \u0026#34;axios\u0026#34;; import { LoginUserData, RegisterUserData } from \u0026#34;../store/slices/authReducer\u0026#34;; import authHeader from \u0026#34;./authHeader\u0026#34;; export const USER_TOKEN_KEY = \u0026#34;USER_TOKEN_KEY\u0026#34;; export const makeLoginUserRequest = async (credentials: LoginUserData) =\u0026gt; { try { const token = (await axios.post(`http://localhost:8000/api/login`, credentials)) .data authHeader.initializeToken(token); localStorage.setItem(USER_TOKEN_KEY, token); return token; } catch (error) { throw new Error(\u0026#34;Failed to login user\u0026#34;); } }; export const makeRegisterUserRequest = async (credentials: RegisterUserData) =\u0026gt; { try { return (await axios.post(`http://localhost:8000/api/register`, credentials)) .data; } catch (error) { throw new Error(\u0026#34;Failed to register user\u0026#34;); } }; Create reducers for handling the fetching of userdata and updating profile Create a file in src/store/slices/userReducer.ts\nimport { createAsyncThunk, createSlice } from \u0026#34;@reduxjs/toolkit\u0026#34;; import { makeGetUserRequest, makeUpdatetUserRequest } from \u0026#34;../../services/userService\u0026#34;; export interface UpdateUserData { name: string; phone: string; address: string; } interface User { id: number; name: string; phone: string; address: string; } interface UserState { user: User | null; loading: boolean; error: string | null; } const initialState: UserState = { user: null, loading: false, error: null, }; export const getUser = createAsyncThunk\u0026lt;User, void\u0026gt;( \u0026#34;auth/getUser\u0026#34;, async () =\u0026gt; { return await makeGetUserRequest(); } ); export const updateUser = createAsyncThunk\u0026lt;User, UpdateUserData\u0026gt;( \u0026#34;auth/updateUser\u0026#34;, async (userData) =\u0026gt; { return await makeUpdatetUserRequest(userData); } ); const authSlice = createSlice({ name: \u0026#34;auth\u0026#34;, initialState, reducers: {}, extraReducers: (builder) =\u0026gt; { builder .addCase(getUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(getUser.fulfilled, (state, action) =\u0026gt; { state.loading = false; state.user = action.payload; }) .addCase(getUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to get user data\u0026#34;; }) .addCase(updateUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(updateUser.fulfilled, (state, action) =\u0026gt; { state.loading = false; state.user = action.payload; }) .addCase(updateUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to update user\u0026#34;; }); }, }); export default authSlice.reducer; Then create the corresponding service file, src/services/userService.ts:\nimport axios from \u0026#34;axios\u0026#34;; import { UpdateUserData } from \u0026#34;../store/slices/userReducer\u0026#34;; import authHeader from \u0026#34;./authHeader\u0026#34;; export const makeGetUserRequest = async () =\u0026gt; { try { const headers = {headers: authHeader.getAuthHeader()}; return (await axios.get(`http://localhost:8000/api/getUserData`, headers)).data; } catch (error) { throw new Error(\u0026#34;Failed to get user data\u0026#34;); } }; export const makeUpdatetUserRequest = async (userData: UpdateUserData) =\u0026gt; { try { const headers = {headers: authHeader.getAuthHeader()}; return ( await axios.post( `http://localhost:8000/api/updateUserProfile`, userData, headers ) ).data; } catch (error) { throw new Error(\u0026#34;Failed to register user\u0026#34;); } }; Finally, create a file in src/services/authHeader.ts, where we shall have the logic for storing and retreving user token. The token gets stored after user login and gets retrieved and sent along with requests which need authetication.\nimport { USER_TOKEN_KEY } from \u0026#34;./authService\u0026#34;; const authHeader = { accessToken: \u0026#39;\u0026#39;, initializeToken: (accessToken: string) =\u0026gt; { authHeader.accessToken = accessToken; }, getAuthHeader: () =\u0026gt; { if (!authHeader.accessToken) { const token = localStorage.getItem(USER_TOKEN_KEY); if (token) { authHeader.initializeToken(token); } } if (authHeader.accessToken) { return {Authorization: \u0026#39;Bearer \u0026#39; + authHeader.accessToken}; } else { return {}; } }, }; export default authHeader; Let\u0026rsquo;s setup the redux react toolkit reducers which will combine and setup the slices above. Create a file in src/store/index.ts\nimport { combineReducers, configureStore } from \u0026#34;@reduxjs/toolkit\u0026#34;; import authReducer from \u0026#34;./slices/authReducer\u0026#34;; import userReducer from \u0026#34;./slices/userReducer\u0026#34;; import { useDispatch, useSelector, useStore } from \u0026#34;react-redux\u0026#34;; const rootReducer = combineReducers({ auth: authReducer, user: userReducer, }); export const store = configureStore({ reducer: rootReducer, }); export type RootState = ReturnType\u0026lt;typeof store.getState\u0026gt;; export type AppDispatch = typeof store.dispatch; export type AppStore = typeof store; export const useAppDispatch = useDispatch.withTypes\u0026lt;AppDispatch\u0026gt;(); export const useAppSelector = useSelector.withTypes\u0026lt;RootState\u0026gt;(); export const useAppStore = useStore.withTypes\u0026lt;AppStore\u0026gt;(); In the above, we are combining userSlice reducer and authSlice reducer into one which will be used to initialise the store. The line after useAppDispatch, useAppSelector and useAppStore are just some syntactic sugar setups so that typescript can easily recognize our entities. In short, useAppDIspatch is to be used in place of useDispatch, useAppSelector in place of useSelector and useAppStore in place of useStore. If we did not set that up, we would have to repeat a lot of code whenever we want to use those if we wanted to get code typescript hinting.\nLets look inside of App.tsx, modify it like below by adding the store to the main App component\nImport our store and Provider at the top:\nimport { Provider } from \u0026#34;react-redux\u0026#34;; import { store } from \u0026#34;./store\u0026#34;; Then wrap the remaining code inside the Provider like below:\n\u0026lt;Provider store={store}\u0026gt; \u0026lt;BrowserRouter\u0026gt; \u0026lt;Link to={\u0026#34;login\u0026#34;}\u0026gt;Login\u0026lt;/Link\u0026gt;\u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;Link to={\u0026#34;register\u0026#34;}\u0026gt;Register\u0026lt;/Link\u0026gt;\u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;Link to={\u0026#34;profile\u0026#34;}\u0026gt;Profile\u0026lt;/Link\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;LoginComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/login\u0026#34; element={\u0026lt;LoginComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/register\u0026#34; element={\u0026lt;RegisterComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/profile\u0026#34; element={\u0026lt;UserProfileComponent /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; \u0026lt;/Provider\u0026gt; Backend Install backend composer packages, setup database environment, user model and setup cors In the terminal run cd backend-folder and run composer install\nThen install the Sanctum package using php artisan install:api. This adds a new package, \u0026quot;laravel/sanctum\u0026quot;: \u0026quot;^4.0\u0026quot;, in composer.json inside the require key.\nAnswer no when asked if you want to run the database migration. Inside the user model app/Models/User.php, add the trait Laravel\\Sanctum\\HasApiTokens:\nThis package is used to issue user tokens upon login and is used to protect routes which need authentication to access.\nAfter installing sanctum, run php artisan config:publish cors to publish the cors.php config file, which will create a new file in config/cors.php.\nCreate a file inside the same backend folder .env and modify the follwing variables:\nDB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=name-of-database DB_USERNAME=database-server-username DB_PASSWORD=database-server-password Make sure you have mysql installed, running. Also enure the database set in the variable DB_DATABASE has been created.\nAt the tip of the model import the class :\nuse Laravel\\Sanctum\\HasApiTokens; and use it as seen below:\nuse HasFactory, HasApiTokens, Notifiable; Modify the $fillable property and add these two columns so we can update those as well:\n\u0026#39;phone\u0026#39;, \u0026#39;address\u0026#39;, Create Routes and Controllers for login and registration Inside the file routes/api.php add the following routes at the end:\nRoute::post(\u0026#39;/login\u0026#39;, [AuthController::class, \u0026#39;login\u0026#39;]); Route::post(\u0026#39;/register\u0026#39;, [AuthController::class, \u0026#39;register\u0026#39;]); and import the AuthController use App\\Http\\Controllers\\AuthController;\nNow create the AuthController in app/Http/Controllers/AuthController.php with the content:\n\u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Auth; use App\\Models\\User; use Illuminate\\Support\\Facades\\Hash; class AuthController extends Controller { public function login(Request $request) { $credentials = $request-\u0026gt;only(\u0026#39;email\u0026#39;, \u0026#39;password\u0026#39;); if (Auth::attempt($credentials)) { $user = Auth::user(); $token = $user-\u0026gt;createToken(\u0026#39;auth_token\u0026#39;)-\u0026gt;plainTextToken; return response()-\u0026gt;json($token); } return response()-\u0026gt;json([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Unauthorized\u0026#39;], 401); } public function register(Request $request) { $request-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required|string|max:255\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;required|string|email|max:255|unique:users\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;required|string|min:8\u0026#39;, ]); $user = User::create([ \u0026#39;name\u0026#39; =\u0026gt; $request-\u0026gt;name, \u0026#39;email\u0026#39; =\u0026gt; $request-\u0026gt;email, \u0026#39;password\u0026#39; =\u0026gt; Hash::make($request-\u0026gt;password), ]); return response()-\u0026gt;json([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;User registered successfully\u0026#39;], 201); } } Create Routes and Controllers for updating and getting user data Add these routes to routes/api.php:\nRoute::middleware(\u0026#39;auth:sanctum\u0026#39;)-\u0026gt;group(function () { Route::get(\u0026#39;getUserData\u0026#39;, [UserProfileController::class, \u0026#39;user\u0026#39;]); Route::post(\u0026#39;updateUserProfile\u0026#39;, [UserProfileController::class, \u0026#39;updateProfile\u0026#39;]); }); This line Route::middleware('auth:sanctum')-\u0026gt;group(function () { is meant to add a protection middleware group so that the routes are only accessibly by a logged in user who provides a valid token. This is made possible by the sanctum package we just installed.\nImport the controller at the top use App\\Http\\Controllers\\UserProfileController;:\nAdd a controller file in app/Http/Controllers/UserProfileController.php with the content:\n\u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; use Illuminate\\Http\\Response; use Illuminate\\Support\\Facades\\Auth; class UserProfileController extends Controller { public function updateProfile(Request $request) { $request-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required|string|max:255\u0026#39;, \u0026#39;phone\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;string\u0026#39;], \u0026#39;address\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;string\u0026#39;], ]); $userData = [ \u0026#39;name\u0026#39; =\u0026gt; $request-\u0026gt;input(\u0026#39;name\u0026#39;), \u0026#39;phone\u0026#39; =\u0026gt; $request-\u0026gt;input(\u0026#39;phone\u0026#39;), \u0026#39;address\u0026#39; =\u0026gt; $request-\u0026gt;input(\u0026#39;address\u0026#39;) ]; $user = Auth::user(); $updated = $user-\u0026gt;update($userData); if (!$updated) { return response(\u0026#39;Could not update profile\u0026#39;, Response::HTTP_BAD_REQUEST); } return response($user-\u0026gt;only(\u0026#39;id\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;phone\u0026#39;, \u0026#39;address\u0026#39;), 200); } public function user() { if (Auth::check()) { $user = Auth::user(); return response($user-\u0026gt;only(\u0026#39;id\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;phone\u0026#39;, \u0026#39;address\u0026#39;), 200); } return response()-\u0026gt;json([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Unauthorized\u0026#39;], 401); } } Update user migration file to add extra fields Inside ther migration file 0001_01_01_000000_create_users_table.php\nAfter the line $table-\u0026gt;string('email')-\u0026gt;unique();\nadd the following:\n$table-\u0026gt;string(\u0026#39;phone\u0026#39;)-\u0026gt;nullable(); $table-\u0026gt;text(\u0026#39;address\u0026#39;); In the backend terminal, run php artisan migrate to create the database tables and columns.\nFinally, run php artisan serve to run the laravel php backend server Ensure you have atleast php 8.2 installed on yur local system. To verify that the backend is running, visit http://localhost:8000/ in your browser and yu shall see some beautiful UI with some links made by laravel authors.\nUpdate login, register and userprofile components Lets move into the RegisterComponent.tsx and modify it as below:\nimport React, { useState } from \u0026#34;react\u0026#34;; import \u0026#34;./RegisterComponent.css\u0026#34;; import { registerUser } from \u0026#34;../store/slices/authReducer\u0026#34;; import { useNavigate } from \u0026#34;react-router-dom\u0026#34;; import { useAppDispatch } from \u0026#34;../store\u0026#34;; const RegisterComponent = () =\u0026gt; { const [name, setName] = useState(\u0026#34;\u0026#34;); const [email, setEmail] = useState(\u0026#34;\u0026#34;); const [password, setPassword] = useState(\u0026#34;\u0026#34;); const dispatch = useAppDispatch(); const naivgate = useNavigate(); const handleSubmit = (event: React.FormEvent\u0026lt;HTMLFormElement\u0026gt;) =\u0026gt; { event.preventDefault(); dispatch(registerUser({ name, email, password })) .unwrap() .then(() =\u0026gt; { naivgate(\u0026#34;/login\u0026#34;); }) .catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }; const onPropertyChage = ( callback: typeof setName | typeof setEmail | typeof setPassword ) =\u0026gt; { return (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;): void =\u0026gt; { callback(event.target.value); }; }; return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Register\u0026lt;/h2\u0026gt; \u0026lt;form onSubmit={handleSubmit} className=\u0026#34;register-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setName)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;email\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setEmail)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setPassword)} type=\u0026#34;password\u0026#34; placeholder=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Register\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default RegisterComponent; What\u0026rsquo;s changed is that we added handlers for when the form is sbmitted a nd when the user changes the input fields, we update the corresponding local component states. We also made a call to the reducer method registerUser so we make a backend call to the server.\nModify the LoginComponent.tsx like so:\nimport React, { useState } from \u0026#34;react\u0026#34;; import \u0026#34;./LoginComponent.css\u0026#34;; import { useAppDispatch } from \u0026#34;../store\u0026#34;; import { loginUser } from \u0026#34;../store/slices/authReducer\u0026#34;; import { useNavigate } from \u0026#34;react-router-dom\u0026#34;; const LoginComponent = () =\u0026gt; { const [username, setUsername] = useState(\u0026#34;\u0026#34;); const [password, setPassword] = useState(\u0026#34;\u0026#34;); const dispatch = useAppDispatch(); const naivgate = useNavigate(); const handleSubmit = (event: React.FormEvent\u0026lt;HTMLFormElement\u0026gt;) =\u0026gt; { event.preventDefault(); dispatch(loginUser({email: username, password})).unwrap().then(() =\u0026gt; { naivgate(\u0026#34;/profile\u0026#34;); }).catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }; const onPropertyChage = (callback: typeof setUsername | typeof setPassword) =\u0026gt; { return (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;): void =\u0026gt; { callback(event.target.value); } } return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Login\u0026lt;/h2\u0026gt; \u0026lt;form onSubmit={handleSubmit} className=\u0026#34;login-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setUsername)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setPassword)} type=\u0026#34;password\u0026#34; placeholder=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default LoginComponent; In here also, we are doing similar actions as we have done for the register component, but upon successfull login, we are redirected to the userprofile screen.\nLet us now modify the UserProfileComponent.tsx:\nimport React, { useEffect, useState } from \u0026#34;react\u0026#34;; import \u0026#34;./UserProfileComponent.css\u0026#34;; import { useAppDispatch } from \u0026#34;../store\u0026#34;; import { getUser, updateUser } from \u0026#34;../store/slices/userReducer\u0026#34;; const UserProfileComponent = () =\u0026gt; { const dispatch = useAppDispatch(); const [name, setName] = useState(\u0026#39;\u0026#39;); const [phone, setPhone] = useState(\u0026#39;\u0026#39;); const [address, setAddress] = useState(\u0026#39;\u0026#39;); useEffect(() =\u0026gt; { dispatch(getUser()) .unwrap() .then((response) =\u0026gt; { setName(response.name) setPhone(response?.phone || \u0026#39;\u0026#39;) setAddress(response?.address || \u0026#39;\u0026#39;) }) .catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }, [dispatch]); const handleSubmit = (event: React.FormEvent\u0026lt;HTMLFormElement\u0026gt;) =\u0026gt; { event.preventDefault(); dispatch(updateUser({name, phone, address})).unwrap().then(() =\u0026gt; { console.log(\u0026#39;Updated successfuly\u0026#39;); }).catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }; const onPropertyChage = (callback: typeof setName | typeof setPhone | typeof setAddress) =\u0026gt; { return (event: React.ChangeEvent\u0026lt;HTMLInputElement|HTMLTextAreaElement\u0026gt;): void =\u0026gt; { callback(event.target.value); } } return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Profile\u0026lt;/h2\u0026gt; \u0026lt;form onSubmit={handleSubmit} className=\u0026#34;update-profile-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;input value={name} onChange={onPropertyChage(setName)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;phone\u0026#34;\u0026gt; \u0026lt;input value={phone} onChange={onPropertyChage(setPhone)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;phone\u0026#34; id=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;address\u0026#34;\u0026gt; \u0026lt;textarea value={address} onChange={onPropertyChage(setAddress)} id=\u0026#34;address\u0026#34; placeholder=\u0026#34;address\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Update Profie\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default UserProfileComponent; What happens here is that, we load the user data once, when the component is mounted, then we set the states for name, phone and address which are tied to the proper input fields. Once the data is returned from the backend, the field will become automatically pupulated. We can change the field values, and submit the data which will send them to teh backend to be updated for the user.\nAdd feature to Logout users Backend logout Logic In the backend file routes/api.php, add the line:\nRoute::post(\u0026#39;/logout\u0026#39;, [AuthController::class, \u0026#39;logout\u0026#39;]); in the protected route group, so that only loggedin users can access it to logout and destroy the user session and delete the token.\nAdd the method in te AuthController.\npublic function logout(Request $request) { $request-\u0026gt;user()-\u0026gt;currentAccessToken()-\u0026gt;delete(); return response()-\u0026gt;json([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Logged out successfully\u0026#39;]); } Frontend logout Logic In the frontend, in App.tsx add this line to the list of routes\n\u0026lt;Route path=\u0026#34;/logout\u0026#34; element={\u0026lt;LogoutComponent /\u0026gt;} /\u0026gt; and add the following to the links section:\n\u0026lt;\u0026gt; \u0026lt;/\u0026gt;\u0026lt;Link to={\u0026#34;logout\u0026#34;}\u0026gt;Logout\u0026lt;/Link\u0026gt; and import the component:\nimport LogoutFLogoutComponentorm from \u0026#34;./components/LogoutComponent\u0026#34;; Create a component for logout src/components/LogoutComponent.tsx\nimport React from \u0026#34;react\u0026#34;; import { logoutUser } from \u0026#34;../store/slices/authReducer\u0026#34;; import { useAppDispatch } from \u0026#34;../store\u0026#34;; import { useNavigate } from \u0026#34;react-router-dom\u0026#34;; const LogoutComponent = () =\u0026gt; { const dispatch = useAppDispatch(); const navigate = useNavigate(); const handleAcceptLogout = () =\u0026gt; { dispatch(logoutUser()) .unwrap().then(() =\u0026gt; { navigate(\u0026#34;/login\u0026#34;); }) .catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }; const handleCancelLogout = () =\u0026gt; { navigate(\u0026#34;/profile\u0026#34;); }; return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Logout\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;Are you sure you want to logout?\u0026lt;/h2\u0026gt; \u0026lt;button onClick={handleAcceptLogout}\u0026gt;Yes\u0026lt;/button\u0026gt; \u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;button onClick={handleCancelLogout}\u0026gt;No\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default LogoutComponent; The logou component show two buttons, one to confirm logout, which will send an api request. The second to cancel the logout and send us back to the profie screen.\nInside of src/store/slices/authReducer.ts add this:\nexport const logoutUser = createAsyncThunk\u0026lt;void, void\u0026gt;( \u0026#34;auth/logoutUser\u0026#34;, async () =\u0026gt; { return await makeLogoutUserRequest(); } ); and add along the followibg cases to extra reducers:\n.addCase(logoutUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(logoutUser.fulfilled, (state) =\u0026gt; { state.loading = false; state.token = null; }) .addCase(logoutUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to logout user\u0026#34;; }) Next, inside of src/services/authService.ts, add:\nexport const makeLogoutUserRequest = async () =\u0026gt; { try { const headers = {headers: authHeader.getAuthHeader()}; await axios.post(`http://localhost:8000/api/logout`, null, headers); authHeader.clearToken(); localStorage.removeItem(USER_TOKEN_KEY); } catch (error) { throw new Error(\u0026#34;Failed to loglogoutin user: service\u0026#34;); } }; This sends a request to the laravel backend api. The backend deletes the user tokens. When that succeeds, the frontend clears the localstorage key which held the token, and the authHeader config file is cleared from holding a copy of that token. We are then redirected to the login page.\n","date":"May 28, 2024","hero":"/images/posts/2024-05-22-laravel-11-and-react-18-login-and-registration-tutorial-with-react-redux-toolkit.png","permalink":"http://laminsanneh.com/posts/laravel-11-react-18-login-registration-tutorial-react-redux-toolkit/","summary":"Introduction In this tutorial, we will be setting up an indepth tutorial guide of react.js and laravel 11 system for user authentication and registration. We will be using typescript on the react.js frontned, along with react redux toolkit, but do not worry as youc an follow along even if you only know javascript. React redux toolkit helps with state management. It might be overkill for a simple login registration app like this, but makes life very easy once the app codebase grows.","tags":[],"title":"Laravel 11 and React 18 Login and Registration tutorial with React Redux Toolkit"},{"categories":["Self Improvement"],"contents":"Introduction As someone who crunches out code, whether moderately or a lot if you’re like me. You must have incurred some technical debt somewhere along the lines.\nDevelopment approaches Technical debt is the term given to a certain programming scenario. Assume you had a project with a target deadline. As the technical lead of the project, you are sometimes faced with two decisions which are:\nThe long and proper way Using this approach is the most ideal way of development. Many best practises of development are followed using this way.\nHowever, the downside is that it may take longer to complete the task at hand. There is a higher risk of going over the maximum given time to complete the project.\nThe upside is that, when there is a requirement to change the code at a later code, it would probably be easier to do that since all the pieces are very decoupled.\nThe quick and dirty way Using this method, you would probably finish the project on time. Following this way, you may not follow best practises and patterns, and maybe not even test your code. Enough consideration may not be taken to make sure the code modules are decoupled enough.\nHowever, in this method, a project would most likely be finished on time given that there are no other external problems. The downside to this though may be that, when there is a need for code change in the future, it may come at a cost, hence the term technical debt.\nThe reason its called technical debt is that, ease of change and best practices were sacrificed for speed. Even though we knew that this would come at a cost later in the future, but because of the time( or maybe other factors) constraint, we had to do it the quick and dirty way.\n","date":"September 2, 2013","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/posts/technical-debt/","summary":"Introduction As someone who crunches out code, whether moderately or a lot if you’re like me. You must have incurred some technical debt somewhere along the lines.\nDevelopment approaches Technical debt is the term given to a certain programming scenario. Assume you had a project with a target deadline. As the technical lead of the project, you are sometimes faced with two decisions which are:\nThe long and proper way Using this approach is the most ideal way of development.","tags":[],"title":"What is Technical Debt?"},{"categories":["Javascript"],"contents":"Manual all the way! When you start out web developing, the appeal to do a lot of stuff manually might be appealing. However, once you step into intermediate to advanced level you will probably be constantly searching for tools to help automate your workflow. One such tool for me is Live Reload.\nIf you are wondering what this tool does. It enables you to see html changes instantly in your browser as you type. All this happens withou you needing to refresh your browser on every change to your markup. The reload is done by the tool automatically\nYou can probably set it up for use in various ways. One easy way I found very quick to set up is to use the chrome extension in conjunction with sublime text 2 plugin.\nSetup Steps Ok enough theory now, I will show you how to set up live reload in 5 easy steps for you environment\nGet and install the sublime text 2 editor here\nInstall the live reload sublime text plugin using the package manager\nLive reload sublime extension\nInstall the live reload chrome extension using the link above. Make sure to allow it to access your url in the chrome extension settings. If you happen to not be using chrome, you can follow the instructions at that link on how to get it for other browsers.\nCreate a new html file and load it in your browser.\nEnable the extension by clicking on the plugin image on your title bar. Change your html file content. Save the file and watch the changes reflect in your browser instantly in full glory (thumbs up to modern web development).\nLive reload chrome extension\nVerdict If this is the first time you have come across such a tool. Go ahead and give it a try, I am very positive that you’ll never go back once you have. If not then at least you could recommend it to a friend who may find it useful\nWell thats all you need to do. Hope that was helpful. If you need any help with the instructions, please let us know in the comments or you can get in touch with me. If you have anything else to add, please do let us know in the comments below.\n","date":"June 16, 2013","hero":"/images/posts/Sublime_Text.png","permalink":"http://laminsanneh.com/posts/set-live-reload-5-easy-steps/","summary":"Manual all the way! When you start out web developing, the appeal to do a lot of stuff manually might be appealing. However, once you step into intermediate to advanced level you will probably be constantly searching for tools to help automate your workflow. One such tool for me is Live Reload.\nIf you are wondering what this tool does. It enables you to see html changes instantly in your browser as you type.","tags":[],"title":"How to set up live reload in 5 easy steps"},{"categories":["Javascript"],"contents":"Introduction We all have our favourite languages that we feel most comfortable with for various reasons. One such language for me is the c-sharp language. One of the primary reasons why I love the language is a really cool feature called Linq.\nI simply cannot emphasize the amount of time this feature has saved me while doing work. It integrates seamlessly into my workflow and find myself almost subconsciously using it. And did I say super awesome chaining you could do as well just like in jquery.\nTalking of jquery, as of late, most of my work has been involved with javascript and json and such stuff. I find myself missing this really cool linq feature. I had to write a lot of my own custom extension methods to manipulate arrays and json objects. If you are in the same boat as me, you might find the following examples very useful. Some examples of linq features you can find substitutes for in javascript are below.\nThe underscore “_” is a global variable which is available to you after including the underscore.js script in you application.\nIf you have a javascript array for example, myArray, you can do the following operations on it using underscore.\n1. Looping through array elements _.each(myArray, functionToRun)\nwhere the custom function “functionToRun” is a function which you have written an implementation for and it is passed a single item in the array during each iteration\n2. Filter array elemnts based on a “where” criteria( familiar, linq people?) _.where(myArray, properties)\nIn this case, the variable properties is a key value object which is used to filter the array “myArray”\nFor example if you have an array in the format :\nvar myArray = [{ name : \u0026ldquo;Bob\u0026rdquo; }, { name : \u0026ldquo;Alex\u0026rdquo; }, { name : \u0026ldquo;Bob\u0026rdquo; } ]\npassing the array above with the following filter property :\nvar properties = { name : \u0026ldquo;Alex\u0026rdquo; }\nwould filter through the array and return a single item which matches the criteria specified in the “properties” variable. In this case the value returned is an array with the object having a name of “Alex” as shown below :\n[{ name : \u0026ldquo;Alex\u0026rdquo; }]\n3. Get first item from an array Using the following method passing your array as the first argument would return you the first item of the array\n_.first(myArray)\n4. Taking the first n items from an array Using the same method above but this time passing an optional number as a second argument will return you the first n items in the array\n_.first(array, n)\nMy C-sharp buddies are probably thinking of the Take method right now.\nWhile c-sharp developers coming from the .net world will be familiar with the examples above, it will also be useful for those who were primarily developing in javascript and need some extra firepower with object manipulation.\nIf you need reference and want to find some more useful features like the one I just showcased above, you can head over to the official Underscore Js website at http://underscorejs.org/\nThat’s it for now. Hopefully this would serve you well for the many awesome JavaScript years ahead of you. Thanks for reading and please do let us know if you have anything to add in the comments below.\n","date":"May 22, 2013","hero":"/images/posts/underscore_js.png","permalink":"http://laminsanneh.com/posts/2013-05-22-underscore-js-the-missing-linq-for-c-sharp-developers/","summary":"Introduction We all have our favourite languages that we feel most comfortable with for various reasons. One such language for me is the c-sharp language. One of the primary reasons why I love the language is a really cool feature called Linq.\nI simply cannot emphasize the amount of time this feature has saved me while doing work. It integrates seamlessly into my workflow and find myself almost subconsciously using it.","tags":[],"title":"Underscore js, the missing Linq for c-sharp developers"},{"categories":["Javascript"],"contents":"Introduction Lets get something straight, this stuff (Html5 localStorage) should be simple, dead simple, so here we go.\nStoring Simple Data (e.g. numbers and strings) localStorage.setItem(keyName, myString);\nNotice the capital letter “S“ in localStorage , its necessary.\nDon’t worry localStorage is a global variable in your browser, so use it freely from anywhere.\nRetrieving Simple Data localStorage.getItem(keyName);\nStoring Object localStorage.setItem(keyName, JSON.stringify(yourObject));\nWhen storing objects, you would want to serialize your object into a string using “JSON.stringify(yourObject)” because local storage only stores simple data (i.e. numbers and strings), so you object gets converted into a json string.\nRetrieving Object JSON.parse(localStorage.getItem(keyName));\nWhen retrieving objects, you would want to deserialize its string form from your storage back into an object using “JSON.parse” method.\n","date":"April 20, 2013","hero":"/images/posts/local-storage.png","permalink":"http://laminsanneh.com/posts/html5-localstorage-dead-simple/","summary":"Introduction Lets get something straight, this stuff (Html5 localStorage) should be simple, dead simple, so here we go.\nStoring Simple Data (e.g. numbers and strings) localStorage.setItem(keyName, myString);\nNotice the capital letter “S“ in localStorage , its necessary.\nDon’t worry localStorage is a global variable in your browser, so use it freely from anywhere.\nRetrieving Simple Data localStorage.getItem(keyName);\nStoring Object localStorage.setItem(keyName, JSON.stringify(yourObject));\nWhen storing objects, you would want to serialize your object into a string using “JSON.","tags":[],"title":"Html5 localStorage, dead simple"},{"categories":["Javascript"],"contents":"The Problem When developing highly ajax enabled applications using javascript, you may not always be fortunate to have both the client and server side of the application be hosted on the same domain. You might be asking, what does this mean? Good question.\nI am confident that you know what a domain is. If not, then have a quick look here at the wikipedia article. Ok, so lets say you have a domain named http://www.mydomain.com.\nAnd you have an application hosted on that domain. By default that application would be using port 80 of the domain like so : http://www.mydomain.com:80 .\nIf you happen to have another (server side) part of the application hosted on another domain like http://www.myotherdomain.com . When your client side part of the application tries to connect to the server side using any of the four CRUD ( create, read, update and delete) through ajax.\nMost modern browsers, because of security reasons, would not let that operation happen. You would be greeted by a Cross Origin Resource Sharing error if you try to do such a connetion.\nWhat this error means is, the server would not let your client side application access any resource in server side application. Now you may be clever and be like “hey!”, what if I put both client and server side on the same domain?\nYes, pretty clever but unless both client and server side share the same port and are on the same domain. The application considers the two sides to be on different domains (i.e. considers http://www.mydomain.com:80 and http://www.mydomain.com:90 to be two different domains) and would still throw the CORS error we encountered earlier on.\nDont be alarmed too much though because there is a solution which I am about to share with you. This is one trick I discovered while working on my chat application( which is still in progress ) whose client and server side are hosted in a similar manner (on the same domain but on different ports).\nThere are two steps involved in this solution You would need to make you client side add an http header to it request so as to let the server know from what domain( including the port) the request is originating from. This is done adding a header with a key value pair of ORIGIN and domainname respectively as so : Origin: http://www.example-client.com: 68\nassuming port 68 is the port on which your client app is hosted on\nNow you have to make a change in you server side application so it allows requestes from foreign domains. How you do that is to add an http header with a key value pair of “Access-Control-Allow-Origin” and “domain-to-be-allowed-to-make-requests” respectively to any response it sends for any foreign domain requests, like so : Access-Control-Allow-Origin: http://www.example-client.com:100\nThis way when the server receives a request with the ORIGIN header. If that matches any of the allowed domains in it response, then the two applications are able to communicate.\nWhew!, that was a tough one but hopefully now that won’t be an issue for you any more. That’s it for now and as usual, please let us know in the comments if you have anything else to add or if you have any questions. Thanks for reading.\n","date":"April 8, 2013","hero":"/images/posts/cors.png","permalink":"http://laminsanneh.com/posts/cross-origin-resource-sharing/","summary":"The Problem When developing highly ajax enabled applications using javascript, you may not always be fortunate to have both the client and server side of the application be hosted on the same domain. You might be asking, what does this mean? Good question.\nI am confident that you know what a domain is. If not, then have a quick look here at the wikipedia article. Ok, so lets say you have a domain named http://www.","tags":[],"title":"What is Cross Origin Resource Sharing and when to use it?"},{"categories":["Self Improvement"],"contents":"A wiseman’s advice My dad once told me boy. Yes, literally, “boy” was the nickname he gave me for some reason. He said “you will never be satisfied if you always want to keep up with the latest and greatest gadgets”. He also said that sometimes its ok to be behind schedule a little bit. You see, my thought as a young, gadget addicted teenager was that. “This was some excuse he’d come up with just to have some breathing space from getting me the latest video games”. How naive I was though.\nLooking back Looking back from now, I can translate his words to match my current “hubby” and joint profession, which is software development. When I just started out about 5 years ago, I was very enthusiastic with just about every new technology I came across in my field. I dabbled into a whole bunch of “stuff” ranging from java, python, c, php, c sharp e.t.c.\nFrustration, having to change strategy Few years down the road, frustration started creeping in. Not because of my lack of ability in comprehending the technologies. But because it was near impossible in keeping up with technology and its rapid pace. Going like this for a while, I quickly realized I had used most of the time to keep up instead of digging into some specifics. I had to quickly change my strategy if I was to stay sane among all this craziness.\nObviously, one should have known this I can guess what some of you may be thinking. That this realization should have been obvious. That one should know this. But let me tell you it isn’t so. It can be very easy for you to become so engrossed in this technology world that you sometime sacrifise quality for quantity because lets face it, the technology world just keeps getting more and more fascinating as the years move by.\nSensible persona kicking in Now with this realization I had narrowed down my niche a little bit more. Not to say that I would soon start calling mself a “c sharp” developer or a “php” programmer because thats just plain silly. But I would narrow down my focus, and I would advice you to follow suit if you are starting out, because believe, me I came to realize the hard way that there were sone hidden truths behind my dad’s words.\nDont get it wrong, understand it This may seem like a contradiction to a previous post I wrote earlier on about how learning a new programming language can help you become a better programmer. But if you look closely, you may come to realize that its more of a question of how much is enough? If you only know one language, say php, yes maybe knowing java later will be of use in teaching you good practise. On the other hand though if you know c, python and ruby, you probably may not gain much from learning a language like java.\nConclusion So its mostly a judgement call and whichever you decide to make, I wish you the best of luck in your fabolous career. As usual, if you have something to share, please do let us know in the comments below. Thanks for reading.\n","date":"April 6, 2013","hero":"/images/posts/staying-sane.jpg","permalink":"http://laminsanneh.com/posts/staying-sane-craziness-keeping-technology/","summary":"A wiseman’s advice My dad once told me boy. Yes, literally, “boy” was the nickname he gave me for some reason. He said “you will never be satisfied if you always want to keep up with the latest and greatest gadgets”. He also said that sometimes its ok to be behind schedule a little bit. You see, my thought as a young, gadget addicted teenager was that. “This was some excuse he’d come up with just to have some breathing space from getting me the latest video games”.","tags":[],"title":"Staying Sane among all the craziness (keeping up with technology)"},{"categories":["Self Improvement"],"contents":"My Theory I came into first year at the University of Manchester, with a fair knowledge of programming in Java. I was fully aware that there were people out there who were well versed in other languages and using it to solve real life problems. Even with this knowledge, I did not even bother to look into any other because I hadn’t yet known the importance of learning a new programming language. I was under the impression that Java was all I needed to know. That if I knew it well enough, it could easily solve any problem I wanted to.\nFirst Year Project Few weeks into my studies, a few colleagues of mine and I had to do start a group project. It was a website about helping local footballers connect with local clubs. This was the first real task which put my initial theory to test. Remember, I was under the impression that Java was all I needed. At first thought, I was thinking, hmm, no problems, we could do it in Java because we all knew that. But for some reason, we were advised by my first year tutor to use a different language to the one we already knew. He told us to look into Php, and specifically a framework called Cake Php.\nChristmas Time research At around Christmas time we all started researching about Php. Remember, most if not all of us had no knowledge of php. Even worse, we were to learn a framework on top of that. I remember going to the Netbeans website and diving into every piece of Php tutorial I could find there. This was not easy but I knew I had to learn it eventually.\nAfter Christmas In our second semester, we all met several times to discuss our project. After a while of doing this, our website was still nowhere near complete. We had gone a decent way though, we had a site up and running but there were still loads to be done. We really tried hard doing all the research we could, send links here and there to each other. Around march, we had to showcase our project result for marking. We did a presentation on what we had done already and also had the chance to explain other plans we had but did not implements yet. To be honest, I think we did well with a mark of 65%, with a very unfinished product.\nLessons learnt After the project, I learnt two very valuable lessons. The lessons were that, one should never use the same tool, in this case programming language, to try to solve every problem. And secondly, one should never be content with what they already know, you should always try to reach out and learn more.\nThese Days As a result of that project, I still keep thinking what could have been, if we knew something else apart from Java. I have become even more motivated to learn more languages. After doing more Php for over a year, i started looking into JavaScript. I did that for a while, the usual jQuery. After a few months, I started getting into .net. I did a bit of c# with Asp.Net Mvc, web forms e.t.c. during the summer of 2012. I must say its the best choice I had made yet in terms of language or platform choice. It even helped me get a placement at an Oil distribution company called Gazprom Energy in Manchester where I did a fair amount of .Net development with web forms and Wcf services . And the best thing of all is, I do not even intend to stop there. Currently, i have seriously started learning the whole html5 stack starting with JavaScript language core. Doing a bit of backbone js, a nice little library with strong emphasis on back-end connection to help me understand the language architecture and design patterns. After that, I plan to learn ruby and for the mean time, I will concentrate on building up on those skills for the future because I think learning a new programming language can help you become a better programmer. That’s all I have for now, I will see you in the next post and thanks for reading. If you have anything interesting to share, please let us know in the comments below. Adiós.\nYou can read up on what one of my colleagues is up to by going to his blog post about his third year project.\n","date":"February 19, 2013","hero":"/images/posts/new-language-different-day.png","permalink":"http://laminsanneh.com/posts/learning-programming-language-programmer/","summary":"My Theory I came into first year at the University of Manchester, with a fair knowledge of programming in Java. I was fully aware that there were people out there who were well versed in other languages and using it to solve real life problems. Even with this knowledge, I did not even bother to look into any other because I hadn’t yet known the importance of learning a new programming language.","tags":[],"title":"How learning a new programming language can help you become a better programmer?"},{"categories":["ASP .Net"],"contents":"Introduction When I first started doing Net Mvc programming, one of the first stumbling block I had was understanding the Asp.Net MVC 4 project structure and folders. So I decided to share some of what I know now that I’m comfortable with them. This tutorial applies to both Visual Studio 2010 and Visual Studio 2012, sorry Visual studio 2008 and Visual studio 2005 folks, I was not programming .Net and or C# back in those days. This is not a What is Visual Studio tutorial, but I have a separate post coming up soon for that if you’re new to it as well. The language does not matter, either C# or Visual Basic will do. We’ll use a new Asp.Net MVC3/4 web application as the example for this post.\nCreate a New Asp.Net Mvc 4 solution Start by creating a new project by going to file new project on the upper left of your Editor. Using VS 2012 with the 2010 blue theme applied\nSolution ‘MvcApplication3’ This is the name of your solution. A solution is like a container for your whole application. In .Net world, it is the global container which contains other projects. A single application can have only one solution but an Mvc 4 solution can contain multiple projects. An example of a project is described below after the image showing a newly created solution. Visual studio project structure fresh\nMvcApplication3 – A Project Name This is the name for a single project. It is contained in the solution we just described above. In this project we have direct children folders and or files. The children we would now briefly describe below.\nProperties This is where we have information related to our project which helps in uniquely identifying it. It is sort of like a meta file for our project.\nReferences In here we have references to other projects in our solution and DLL dependencies which we our project needs to run.\nApp_Data Inside of here is where you can store data related to your website. Most of the time you people use it to store portable file-based databases like an .mdf file for example.\nApp_Start The app start is somewhat of a special folder in that by default it contains various configuration files. Below are the default files in it upon creating a new project. App Start Folder\nContent This is where you would put stylesheets and optionally images for your website.\nControllers Your application controllers live in here. Just Briefly, a controller is like a decision maker for your application or project. Any requests made by an application user gets directed to one of several controller which then decides what to do next, be it fetch data or store it in the database e.t.c.\nModels Your application models reside in here. For example if your application were to represent entities like Person, Car e.t.c., you’d store those classes here.\nScripts In here as I’m sure you guessed it, is where you organise your javascript files.\nViews The view files for you project reside in here. If you’re wondering what a view file is. It is a file containing html and a little bit of c# code for displaying your pages. C# view files end with .cshtml while VB.Net view files end with .vbhtml . Views Folder\nGlobal.asax file In here, you have project wide settings registration. Any configurations you have made in you application are registered or de-registered in this file. For e.g. routes.\nPackages.config file This file is where your referenced packages in references are described. For e.g. version numbers of referenced packages along with their .net targets are detailed in this file.\nWeb.config Inside of the web.config file is where you store other setting which you need to change without recompiling your code. It is an xml file so does not need compilation. You can also store information like connection strings for your databases, membership providers for website authentication e.t.c.\nWeb config file Sneek peek at part of an asp.net mvc 4 web.config file\nYou still have choices Just Remember, asp.net folder structure is mostly for best practice as most of the structure can be over-ridden in favour of your choice of structure. But most of the time I find that I need to only add extra folders but leave the pre existing default one intact as they pretty much do the job that I want in terms of structuring my code. So there we have it, I hope that helps clear up some confusion. Please comment below if this was of any help.\n","date":"February 10, 2013","hero":"/images/posts/dot-net.png","permalink":"http://laminsanneh.com/posts/understanding-asp-net-mvc-4-project-structure-folders/","summary":"Introduction When I first started doing Net Mvc programming, one of the first stumbling block I had was understanding the Asp.Net MVC 4 project structure and folders. So I decided to share some of what I know now that I’m comfortable with them. This tutorial applies to both Visual Studio 2010 and Visual Studio 2012, sorry Visual studio 2008 and Visual studio 2005 folks, I was not programming .Net and or C# back in those days.","tags":[],"title":"Understanding the ASP.NET MVC 4 Project Structure and Folders"},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/_index.bn/","summary":"Go Notes ","tags":null,"title":"Go এর নোট সমূহ"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/_index.bn/","summary":"","tags":null,"title":"নোট সমূহ"},{"categories":null,"contents":"Bash Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/bash/_index.bn/","summary":"Bash Notes ","tags":null,"title":"ব্যাশের নোট সমূহ"}]