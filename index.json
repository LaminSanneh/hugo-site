[{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Introduction"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"Basic Types"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":["Laravel","React.js"],"contents":"Introduction In this tutorial, we will be setting up an indepth tutorial guide of react.js and laravel 11 system for user authentication and registration. We will be using typescript on the react.js frontned, along with react redux toolkit, but do not worry as youc an follow along even if you only know javascript. React redux toolkit helps with state management. It might be overkill for a simple login registration app like this, but makes life very easy once the app codebase grows. Users will be able to register using an email as their username and password. After successful registration, they shall be able to login. We wil demonstrate the login mechanism by having a userpforile area/route in the frontend of the application which will be locked and only accessible to logged in. The frontend and backend will be on different domains, so the after logging in, we will provide the user with a token, which will be stored in localstorage of the browser. This will be send along in the header each request which requires authentication to get data back from the server. We will also need to setup cors so that our frontend domain can send requests to the backend domanin app.\nProject Structure Firstly, please clone the starter repositories here, one for the laravel backend and one for the react frontend. Put each of them in a separate folder. We already have all tthe required libraries added on the frontend inside package.json as listed below.\n- react-dom\u0026#34;: \u0026#34;^18.2.0\u0026#34;, - \u0026#34;@reduxjs/toolkit\u0026#34;: \u0026#34;^2.2.1\u0026#34;, - \u0026#34;axios\u0026#34;: \u0026#34;^1.6.7\u0026#34;, - \u0026#34;react-redux\u0026#34;: \u0026#34;^9.1.0\u0026#34;, - \u0026#34;react-router-dom\u0026#34;: \u0026#34;^6.22.3\u0026#34;, - \u0026#34;redux\u0026#34;: \u0026#34;^5.0.1\u0026#34; I used vite to create the frontend project and composer to create the backend project in two seperate folders. An alternative would have been to host the react project directly inside the laravel project folder, hence having one domain for both frontend and backend, but we won;t be doibg that in this tutorial. Possibly, we may do it in another blog post.\nFrontend In the terminal, move inside the frontend folder using cd your-frontend-folder and run npm install. After successfully installing the libraries, run npm run dev to start the frontend server. Verify that the server is running at http://localhost:5173/.\nCreate components for LoginComponent.tsx and RegisterComponent.tsx and UserProfileComponent.tsx Create a component in src/components as below:\nsrc/components/LoginComponent.tsx\nimport React from \u0026#34;react\u0026#34;; import \u0026#34;./LoginComponent.css\u0026#34;; const LoginComponent = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Login\u0026lt;/h2\u0026gt; \u0026lt;form className=\u0026#34;login-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; placeholder=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default LoginComponent; with css file src/components/LoginComponent.css:\n.login-form label { display: block; margin-bottom: 10px; } .login-form label input { padding: 10px; } Create a component in src/components/RegisterComponent.tsx\nimport React from \u0026#34;react\u0026#34;; import \u0026#34;./RegisterComponent.css\u0026#34;; const RegisterComponent = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Register\u0026lt;/h2\u0026gt; \u0026lt;form className=\u0026#34;register-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; placeholder=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Register\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default RegisterComponent; with css file src/components/RegisterComponent.css:\n.register-form label { display: block; margin-bottom: 10px; } .register-form input { padding: 10px; } Create a component in src/components/UserProfileComponent.tsx\nimport React from \u0026#34;react\u0026#34;; import \u0026#34;./UserProfileComponent.css\u0026#34;; const UserProfileComponent = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Profile\u0026lt;/h2\u0026gt; \u0026lt;form className=\u0026#34;update-profile-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;phone\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;phone\u0026#34; id=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;address\u0026#34;\u0026gt; \u0026lt;textarea id=\u0026#34;address\u0026#34; placeholder=\u0026#34;address\u0026#34; \u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Update Profie\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default UserProfileComponent; with css file src/components/UserProfileComponent.css:\n.update-profile-form label { display: block; margin-bottom: 10px; } .update-profile-form input, .update-profile-form textarea { padding: 10px; } Add routes and links for Login, Register and UdateProfile Modify App.tsx like below to add the three links for the different components.\nimport \u0026#34;./App.css\u0026#34;; import { Link, Route, BrowserRouter, Routes } from \u0026#34;react-router-dom\u0026#34;; import LoginComponent from \u0026#34;./components/LoginComponent\u0026#34;; import RegisterComponent from \u0026#34;./components/RegisterComponent\u0026#34;; import UserProfileComponent from \u0026#34;./components/UserProfileComponent\u0026#34;; function App() { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;Link to={\u0026#34;login\u0026#34;}\u0026gt;Login\u0026lt;/Link\u0026gt;\u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;Link to={\u0026#34;register\u0026#34;}\u0026gt;Register\u0026lt;/Link\u0026gt;\u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;Link to={\u0026#34;profile\u0026#34;}\u0026gt;Profile\u0026lt;/Link\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;LoginComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/login\u0026#34; element={\u0026lt;LoginComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/register\u0026#34; element={\u0026lt;RegisterComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/profile\u0026#34; element={\u0026lt;UserProfileComponent /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); } export default App; Create reducers for handling login and registration Create a file in src/store/slices/authReducer.ts\nimport { createAsyncThunk, createSlice } from \u0026#34;@reduxjs/toolkit\u0026#34;; import { makeLoginUserRequest, makeRegisterUserRequest } from \u0026#34;../../services/authService\u0026#34;; export interface LoginUserData { email: string; password: string; } export interface RegisterUserData { name: string; email: string; password: string; } interface AuthState { loading: boolean; error: string | null; token: string | null; isAuthenticated: boolean; } const initialState: AuthState = { loading: false, error: null, token: null, isAuthenticated: false, }; export const loginUser = createAsyncThunk\u0026lt;string, LoginUserData\u0026gt;( \u0026#34;auth/loginUser\u0026#34;, async (credentials) =\u0026gt; { return await makeLoginUserRequest(credentials); } ); export const registerUser = createAsyncThunk\u0026lt;void, RegisterUserData\u0026gt;( \u0026#34;auth/registerUser\u0026#34;, async (credentials) =\u0026gt; { return await makeRegisterUserRequest(credentials); } ); const authSlice = createSlice({ name: \u0026#34;auth\u0026#34;, initialState, reducers: {}, extraReducers: (builder) =\u0026gt; { builder .addCase(loginUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(loginUser.fulfilled, (state, action) =\u0026gt; { state.loading = false; state.token = action.payload; }) .addCase(loginUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to login user\u0026#34;; }) .addCase(registerUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(registerUser.fulfilled, (state) =\u0026gt; { state.loading = false; }) .addCase(registerUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to register user\u0026#34;; }) .addDefaultCase(() =\u0026gt; {}); }, }); export default authSlice.reducer; Then create the corresponding service file, src/services/authService.ts which will actually make the API HTTP calls to our laravel backend:\nimport axios from \u0026#34;axios\u0026#34;; import { LoginUserData, RegisterUserData } from \u0026#34;../store/slices/authReducer\u0026#34;; import authHeader from \u0026#34;./authHeader\u0026#34;; export const USER_TOKEN_KEY = \u0026#34;USER_TOKEN_KEY\u0026#34;; export const makeLoginUserRequest = async (credentials: LoginUserData) =\u0026gt; { try { const token = (await axios.post(`http://localhost:8000/api/login`, credentials)) .data authHeader.initializeToken(token); localStorage.setItem(USER_TOKEN_KEY, token); return token; } catch (error) { throw new Error(\u0026#34;Failed to login user\u0026#34;); } }; export const makeRegisterUserRequest = async (credentials: RegisterUserData) =\u0026gt; { try { return (await axios.post(`http://localhost:8000/api/register`, credentials)) .data; } catch (error) { throw new Error(\u0026#34;Failed to register user\u0026#34;); } }; Create reducers for handling the fetching of userdata and updating profile Create a file in src/store/slices/userReducer.ts\nimport { createAsyncThunk, createSlice } from \u0026#34;@reduxjs/toolkit\u0026#34;; import { makeGetUserRequest, makeUpdatetUserRequest } from \u0026#34;../../services/userService\u0026#34;; export interface UpdateUserData { name: string; phone: string; address: string; } interface User { id: number; name: string; phone: string; address: string; } interface UserState { user: User | null; loading: boolean; error: string | null; } const initialState: UserState = { user: null, loading: false, error: null, }; export const getUser = createAsyncThunk\u0026lt;User, void\u0026gt;( \u0026#34;auth/getUser\u0026#34;, async () =\u0026gt; { return await makeGetUserRequest(); } ); export const updateUser = createAsyncThunk\u0026lt;User, UpdateUserData\u0026gt;( \u0026#34;auth/updateUser\u0026#34;, async (userData) =\u0026gt; { return await makeUpdatetUserRequest(userData); } ); const authSlice = createSlice({ name: \u0026#34;auth\u0026#34;, initialState, reducers: {}, extraReducers: (builder) =\u0026gt; { builder .addCase(getUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(getUser.fulfilled, (state, action) =\u0026gt; { state.loading = false; state.user = action.payload; }) .addCase(getUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to get user data\u0026#34;; }) .addCase(updateUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(updateUser.fulfilled, (state, action) =\u0026gt; { state.loading = false; state.user = action.payload; }) .addCase(updateUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to update user\u0026#34;; }); }, }); export default authSlice.reducer; Then create the corresponding service file, src/services/userService.ts:\nimport axios from \u0026#34;axios\u0026#34;; import { UpdateUserData } from \u0026#34;../store/slices/userReducer\u0026#34;; import authHeader from \u0026#34;./authHeader\u0026#34;; export const makeGetUserRequest = async () =\u0026gt; { try { const headers = {headers: authHeader.getAuthHeader()}; return (await axios.get(`http://localhost:8000/api/getUserData`, headers)).data; } catch (error) { throw new Error(\u0026#34;Failed to get user data\u0026#34;); } }; export const makeUpdatetUserRequest = async (userData: UpdateUserData) =\u0026gt; { try { const headers = {headers: authHeader.getAuthHeader()}; return ( await axios.post( `http://localhost:8000/api/updateUserProfile`, userData, headers ) ).data; } catch (error) { throw new Error(\u0026#34;Failed to register user\u0026#34;); } }; Finally, create a file in src/services/authHeader.ts, where we shall have the logic for storing and retreving user token. The token gets stored after user login and gets retrieved and sent along with requests which need authetication.\nimport { USER_TOKEN_KEY } from \u0026#34;./authService\u0026#34;; const authHeader = { accessToken: \u0026#39;\u0026#39;, initializeToken: (accessToken: string) =\u0026gt; { authHeader.accessToken = accessToken; }, getAuthHeader: () =\u0026gt; { if (!authHeader.accessToken) { const token = localStorage.getItem(USER_TOKEN_KEY); if (token) { authHeader.initializeToken(token); } } if (authHeader.accessToken) { return {Authorization: \u0026#39;Bearer \u0026#39; + authHeader.accessToken}; } else { return {}; } }, }; export default authHeader; Let\u0026rsquo;s setup the redux react toolkit reducers which will combine and setup the slices above. Create a file in src/store/index.ts\nimport { combineReducers, configureStore } from \u0026#34;@reduxjs/toolkit\u0026#34;; import authReducer from \u0026#34;./slices/authReducer\u0026#34;; import userReducer from \u0026#34;./slices/userReducer\u0026#34;; import { useDispatch, useSelector, useStore } from \u0026#34;react-redux\u0026#34;; const rootReducer = combineReducers({ auth: authReducer, user: userReducer, }); export const store = configureStore({ reducer: rootReducer, }); export type RootState = ReturnType\u0026lt;typeof store.getState\u0026gt;; export type AppDispatch = typeof store.dispatch; export type AppStore = typeof store; export const useAppDispatch = useDispatch.withTypes\u0026lt;AppDispatch\u0026gt;(); export const useAppSelector = useSelector.withTypes\u0026lt;RootState\u0026gt;(); export const useAppStore = useStore.withTypes\u0026lt;AppStore\u0026gt;(); In the above, we are combining userSlice reducer and authSlice reducer into one which will be used to initialise the store. The line after useAppDispatch, useAppSelector and useAppStore are just some syntactic sugar setups so that typescript can easily recognize our entities. In short, useAppDIspatch is to be used in place of useDispatch, useAppSelector in place of useSelector and useAppStore in place of useStore. If we did not set that up, we would have to repeat a lot of code whenever we want to use those if we wanted to get code typescript hinting.\nLets look inside of App.tsx, modify it like below by adding the store to the main App component\nImport our store and Provider at the top:\nimport { Provider } from \u0026#34;react-redux\u0026#34;; import { store } from \u0026#34;./store\u0026#34;; Then wrap the remaining code inside the Provider like below:\n\u0026lt;Provider store={store}\u0026gt; \u0026lt;BrowserRouter\u0026gt; \u0026lt;Link to={\u0026#34;login\u0026#34;}\u0026gt;Login\u0026lt;/Link\u0026gt;\u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;Link to={\u0026#34;register\u0026#34;}\u0026gt;Register\u0026lt;/Link\u0026gt;\u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;Link to={\u0026#34;profile\u0026#34;}\u0026gt;Profile\u0026lt;/Link\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;LoginComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/login\u0026#34; element={\u0026lt;LoginComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/register\u0026#34; element={\u0026lt;RegisterComponent /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/profile\u0026#34; element={\u0026lt;UserProfileComponent /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; \u0026lt;/Provider\u0026gt; Backend Install backend composer packages, setup database environment, user model and setup cors In the terminal run cd backend-folder and run composer install\nThen install the Sanctum package using php artisan install:api. This adds a new package, \u0026quot;laravel/sanctum\u0026quot;: \u0026quot;^4.0\u0026quot;, in composer.json inside the require key.\nAnswer no when asked if you want to run the database migration. Inside the user model app/Models/User.php, add the trait Laravel\\Sanctum\\HasApiTokens:\nThis package is used to issue user tokens upon login and is used to protect routes which need authentication to access.\nAfter installing sanctum, run php artisan config:publish cors to publish the cors.php config file, which will create a new file in config/cors.php.\nCreate a file inside the same backend folder .env and modify the follwing variables:\nDB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=name-of-database DB_USERNAME=database-server-username DB_PASSWORD=database-server-password Make sure you have mysql installed, running. Also enure the database set in the variable DB_DATABASE has been created.\nAt the tip of the model import the class :\nuse Laravel\\Sanctum\\HasApiTokens; and use it as seen below:\nuse HasFactory, HasApiTokens, Notifiable; Modify the $fillable property and add these two columns so we can update those as well:\n\u0026#39;phone\u0026#39;, \u0026#39;address\u0026#39;, Create Routes and Controllers for login and registration Inside the file routes/api.php add the following routes at the end:\nRoute::post(\u0026#39;/login\u0026#39;, [AuthController::class, \u0026#39;login\u0026#39;]); Route::post(\u0026#39;/register\u0026#39;, [AuthController::class, \u0026#39;register\u0026#39;]); and import the AuthController use App\\Http\\Controllers\\AuthController;\nNow create the AuthController in app/Http/Controllers/AuthController.php with the content:\n\u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Auth; use App\\Models\\User; use Illuminate\\Support\\Facades\\Hash; class AuthController extends Controller { public function login(Request $request) { $credentials = $request-\u0026gt;only(\u0026#39;email\u0026#39;, \u0026#39;password\u0026#39;); if (Auth::attempt($credentials)) { $user = Auth::user(); $token = $user-\u0026gt;createToken(\u0026#39;auth_token\u0026#39;)-\u0026gt;plainTextToken; return response()-\u0026gt;json($token); } return response()-\u0026gt;json([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Unauthorized\u0026#39;], 401); } public function register(Request $request) { $request-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required|string|max:255\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;required|string|email|max:255|unique:users\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;required|string|min:8\u0026#39;, ]); $user = User::create([ \u0026#39;name\u0026#39; =\u0026gt; $request-\u0026gt;name, \u0026#39;email\u0026#39; =\u0026gt; $request-\u0026gt;email, \u0026#39;password\u0026#39; =\u0026gt; Hash::make($request-\u0026gt;password), ]); return response()-\u0026gt;json([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;User registered successfully\u0026#39;], 201); } } Create Routes and Controllers for updating and getting user data Add these routes to routes/api.php:\nRoute::middleware(\u0026#39;auth:sanctum\u0026#39;)-\u0026gt;group(function () { Route::get(\u0026#39;getUserData\u0026#39;, [UserProfileController::class, \u0026#39;user\u0026#39;]); Route::post(\u0026#39;updateUserProfile\u0026#39;, [UserProfileController::class, \u0026#39;updateProfile\u0026#39;]); }); This line Route::middleware('auth:sanctum')-\u0026gt;group(function () { is meant to add a protection middleware group so that the routes are only accessibly by a logged in user who provides a valid token. This is made possible by the sanctum package we just installed.\nImport the controller at the top use App\\Http\\Controllers\\UserProfileController;:\nAdd a controller file in app/Http/Controllers/UserProfileController.php with the content:\n\u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; use Illuminate\\Http\\Response; use Illuminate\\Support\\Facades\\Auth; class UserProfileController extends Controller { public function updateProfile(Request $request) { $request-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required|string|max:255\u0026#39;, \u0026#39;phone\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;string\u0026#39;], \u0026#39;address\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;string\u0026#39;], ]); $userData = [ \u0026#39;name\u0026#39; =\u0026gt; $request-\u0026gt;input(\u0026#39;name\u0026#39;), \u0026#39;phone\u0026#39; =\u0026gt; $request-\u0026gt;input(\u0026#39;phone\u0026#39;), \u0026#39;address\u0026#39; =\u0026gt; $request-\u0026gt;input(\u0026#39;address\u0026#39;) ]; $user = Auth::user(); $updated = $user-\u0026gt;update($userData); if (!$updated) { return response(\u0026#39;Could not update profile\u0026#39;, Response::HTTP_BAD_REQUEST); } return response($user-\u0026gt;only(\u0026#39;id\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;phone\u0026#39;, \u0026#39;address\u0026#39;), 200); } public function user() { if (Auth::check()) { $user = Auth::user(); return response($user-\u0026gt;only(\u0026#39;id\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;phone\u0026#39;, \u0026#39;address\u0026#39;), 200); } return response()-\u0026gt;json([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Unauthorized\u0026#39;], 401); } } Update user migration file to add extra fields Inside ther migration file 0001_01_01_000000_create_users_table.php\nAfter the line $table-\u0026gt;string('email')-\u0026gt;unique();\nadd the following:\n$table-\u0026gt;string(\u0026#39;phone\u0026#39;)-\u0026gt;nullable(); $table-\u0026gt;text(\u0026#39;address\u0026#39;); In the backend terminal, run php artisan migrate to create the database tables and columns.\nFinally, run php artisan serve to run the laravel php backend server Ensure you have atleast php 8.2 installed on yur local system. To verify that the backend is running, visit http://localhost:8000/ in your browser and yu shall see some beautiful UI with some links made by laravel authors.\nUpdate login, register and userprofile components Lets move into the RegisterComponent.tsx and modify it as below:\nimport React, { useState } from \u0026#34;react\u0026#34;; import \u0026#34;./RegisterComponent.css\u0026#34;; import { registerUser } from \u0026#34;../store/slices/authReducer\u0026#34;; import { useNavigate } from \u0026#34;react-router-dom\u0026#34;; import { useAppDispatch } from \u0026#34;../store\u0026#34;; const RegisterComponent = () =\u0026gt; { const [name, setName] = useState(\u0026#34;\u0026#34;); const [email, setEmail] = useState(\u0026#34;\u0026#34;); const [password, setPassword] = useState(\u0026#34;\u0026#34;); const dispatch = useAppDispatch(); const naivgate = useNavigate(); const handleSubmit = (event: React.FormEvent\u0026lt;HTMLFormElement\u0026gt;) =\u0026gt; { event.preventDefault(); dispatch(registerUser({ name, email, password })) .unwrap() .then(() =\u0026gt; { naivgate(\u0026#34;/login\u0026#34;); }) .catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }; const onPropertyChage = ( callback: typeof setName | typeof setEmail | typeof setPassword ) =\u0026gt; { return (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;): void =\u0026gt; { callback(event.target.value); }; }; return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Register\u0026lt;/h2\u0026gt; \u0026lt;form onSubmit={handleSubmit} className=\u0026#34;register-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setName)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;email\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setEmail)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setPassword)} type=\u0026#34;password\u0026#34; placeholder=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Register\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default RegisterComponent; What\u0026rsquo;s changed is that we added handlers for when the form is sbmitted a nd when the user changes the input fields, we update the corresponding local component states. We also made a call to the reducer method registerUser so we make a backend call to the server.\nModify the LoginComponent.tsx like so:\nimport React, { useState } from \u0026#34;react\u0026#34;; import \u0026#34;./LoginComponent.css\u0026#34;; import { useAppDispatch } from \u0026#34;../store\u0026#34;; import { loginUser } from \u0026#34;../store/slices/authReducer\u0026#34;; import { useNavigate } from \u0026#34;react-router-dom\u0026#34;; const LoginComponent = () =\u0026gt; { const [username, setUsername] = useState(\u0026#34;\u0026#34;); const [password, setPassword] = useState(\u0026#34;\u0026#34;); const dispatch = useAppDispatch(); const naivgate = useNavigate(); const handleSubmit = (event: React.FormEvent\u0026lt;HTMLFormElement\u0026gt;) =\u0026gt; { event.preventDefault(); dispatch(loginUser({email: username, password})).unwrap().then(() =\u0026gt; { naivgate(\u0026#34;/profile\u0026#34;); }).catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }; const onPropertyChage = (callback: typeof setUsername | typeof setPassword) =\u0026gt; { return (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;): void =\u0026gt; { callback(event.target.value); } } return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Login\u0026lt;/h2\u0026gt; \u0026lt;form onSubmit={handleSubmit} className=\u0026#34;login-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setUsername)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input onChange={onPropertyChage(setPassword)} type=\u0026#34;password\u0026#34; placeholder=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default LoginComponent; In here also, we are doing similar actions as we have done for the register component, but upon successfull login, we are redirected to the userprofile screen.\nLet us now modify the UserProfileComponent.tsx:\nimport React, { useEffect, useState } from \u0026#34;react\u0026#34;; import \u0026#34;./UserProfileComponent.css\u0026#34;; import { useAppDispatch } from \u0026#34;../store\u0026#34;; import { getUser, updateUser } from \u0026#34;../store/slices/userReducer\u0026#34;; const UserProfileComponent = () =\u0026gt; { const dispatch = useAppDispatch(); const [name, setName] = useState(\u0026#39;\u0026#39;); const [phone, setPhone] = useState(\u0026#39;\u0026#39;); const [address, setAddress] = useState(\u0026#39;\u0026#39;); useEffect(() =\u0026gt; { dispatch(getUser()) .unwrap() .then((response) =\u0026gt; { setName(response.name) setPhone(response?.phone || \u0026#39;\u0026#39;) setAddress(response?.address || \u0026#39;\u0026#39;) }) .catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }, [dispatch]); const handleSubmit = (event: React.FormEvent\u0026lt;HTMLFormElement\u0026gt;) =\u0026gt; { event.preventDefault(); dispatch(updateUser({name, phone, address})).unwrap().then(() =\u0026gt; { console.log(\u0026#39;Updated successfuly\u0026#39;); }).catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }; const onPropertyChage = (callback: typeof setName | typeof setPhone | typeof setAddress) =\u0026gt; { return (event: React.ChangeEvent\u0026lt;HTMLInputElement|HTMLTextAreaElement\u0026gt;): void =\u0026gt; { callback(event.target.value); } } return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Profile\u0026lt;/h2\u0026gt; \u0026lt;form onSubmit={handleSubmit} className=\u0026#34;update-profile-form\u0026#34;\u0026gt; \u0026lt;label htmlFor=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;input value={name} onChange={onPropertyChage(setName)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;phone\u0026#34;\u0026gt; \u0026lt;input value={phone} onChange={onPropertyChage(setPhone)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;phone\u0026#34; id=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label htmlFor=\u0026#34;address\u0026#34;\u0026gt; \u0026lt;textarea value={address} onChange={onPropertyChage(setAddress)} id=\u0026#34;address\u0026#34; placeholder=\u0026#34;address\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button\u0026gt;Update Profie\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; ); }; export default UserProfileComponent; What happens here is that, we load the user data once, when the component is mounted, then we set the states for name, phone and address which are tied to the proper input fields. Once the data is returned from the backend, the field will become automatically pupulated. We can change the field values, and submit the data which will send them to teh backend to be updated for the user.\nAdd feature to Logout users Backend logout Logic In the backend file routes/api.php, add the line:\nRoute::post(\u0026#39;/logout\u0026#39;, [AuthController::class, \u0026#39;logout\u0026#39;]); in the protected route group, so that only loggedin users can access it to logout and destroy the user session and delete the token.\nAdd the method in te AuthController.\npublic function logout(Request $request) { $request-\u0026gt;user()-\u0026gt;currentAccessToken()-\u0026gt;delete(); return response()-\u0026gt;json([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Logged out successfully\u0026#39;]); } Frontend logout Logic In the frontend, in App.tsx add this line to the list of routes\n\u0026lt;Route path=\u0026#34;/logout\u0026#34; element={\u0026lt;LogoutComponent /\u0026gt;} /\u0026gt; and add the following to the links section:\n\u0026lt;\u0026gt; \u0026lt;/\u0026gt;\u0026lt;Link to={\u0026#34;logout\u0026#34;}\u0026gt;Logout\u0026lt;/Link\u0026gt; and import the component:\nimport LogoutFLogoutComponentorm from \u0026#34;./components/LogoutComponent\u0026#34;; Create a component for logout src/components/LogoutComponent.tsx\nimport React from \u0026#34;react\u0026#34;; import { logoutUser } from \u0026#34;../store/slices/authReducer\u0026#34;; import { useAppDispatch } from \u0026#34;../store\u0026#34;; import { useNavigate } from \u0026#34;react-router-dom\u0026#34;; const LogoutComponent = () =\u0026gt; { const dispatch = useAppDispatch(); const navigate = useNavigate(); const handleAcceptLogout = () =\u0026gt; { dispatch(logoutUser()) .unwrap().then(() =\u0026gt; { navigate(\u0026#34;/login\u0026#34;); }) .catch((response) =\u0026gt; { alert(`Error occured ${response.message}`); }); }; const handleCancelLogout = () =\u0026gt; { navigate(\u0026#34;/profile\u0026#34;); }; return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Logout\u0026lt;/h2\u0026gt; \u0026lt;h2\u0026gt;Are you sure you want to logout?\u0026lt;/h2\u0026gt; \u0026lt;button onClick={handleAcceptLogout}\u0026gt;Yes\u0026lt;/button\u0026gt; \u0026lt;\u0026gt; \u0026lt;/\u0026gt; \u0026lt;button onClick={handleCancelLogout}\u0026gt;No\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default LogoutComponent; The logou component show two buttons, one to confirm logout, which will send an api request. The second to cancel the logout and send us back to the profie screen.\nInside of src/store/slices/authReducer.ts add this:\nexport const logoutUser = createAsyncThunk\u0026lt;void, void\u0026gt;( \u0026#34;auth/logoutUser\u0026#34;, async () =\u0026gt; { return await makeLogoutUserRequest(); } ); and add along the followibg cases to extra reducers:\n.addCase(logoutUser.pending, (state) =\u0026gt; { state.loading = true; state.error = null; }) .addCase(logoutUser.fulfilled, (state) =\u0026gt; { state.loading = false; state.token = null; }) .addCase(logoutUser.rejected, (state, action) =\u0026gt; { state.loading = false; state.error = action.error.message || \u0026#34;Failed to logout user\u0026#34;; }) Next, inside of src/services/authService.ts, add:\nexport const makeLogoutUserRequest = async () =\u0026gt; { try { const headers = {headers: authHeader.getAuthHeader()}; await axios.post(`http://localhost:8000/api/logout`, null, headers); authHeader.clearToken(); localStorage.removeItem(USER_TOKEN_KEY); } catch (error) { throw new Error(\u0026#34;Failed to loglogoutin user: service\u0026#34;); } }; This sends a request to the laravel backend api. The backend deletes the user tokens. When that succeeds, the frontend clears the localstorage key which held the token, and the authHeader config file is cleared from holding a copy of that token. We are then redirected to the login page.\n","date":"May 28, 2024","hero":"/images/posts/2024-05-22-laravel-11-and-react-18-login-and-registration-tutorial-with-react-redux-toolkit.png","permalink":"http://laminsanneh.com/posts/laravel-11-react-18-login-registration-tutorial-react-redux-toolkit/","summary":"Introduction In this tutorial, we will be setting up an indepth tutorial guide of react.js and laravel 11 system for user authentication and registration. We will be using typescript on the react.js frontned, along with react redux toolkit, but do not worry as youc an follow along even if you only know javascript. React redux toolkit helps with state management. It might be overkill for a simple login registration app like this, but makes life very easy once the app codebase grows.","tags":[],"title":"Laravel 11 and React 18 Login and Registration tutorial with React Redux Toolkit"},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/go/_index.bn/","summary":"Go Notes ","tags":null,"title":"Go এর নোট সমূহ"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/_index.bn/","summary":"","tags":null,"title":"নোট সমূহ"},{"categories":null,"contents":"Bash Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://laminsanneh.com/notes/bash/_index.bn/","summary":"Bash Notes ","tags":null,"title":"ব্যাশের নোট সমূহ"}]